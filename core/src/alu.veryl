import eei::*;
import corectrl::*;

module alu (
    ctrl  : input  InstCtrl,
    op1   : input  UIntX   ,
    op2   : input  UIntX   ,
    result: output UIntX   ,
) {
    let add: UIntX = op1 + op2;
    let sub: UIntX = op1 - op2;

    let srl: UIntX = op1 >> op2[4:0];
    let sra: SIntX = $signed(op1) >>> op2[4:0];

    always_comb {
        if ctrl.is_aluop {
            case ctrl.funct3 {
                3'b000: result = if ctrl.insttype == InstType::I | ctrl.funct7 == 0 {
                            add
                        } else {
                            sub
                        };
                3'b001: result = op1 << op2[4:0];
                3'b010: result = {1'b0 repeat XLEN - 1, $signed(op1) <: $signed(op2)};
                3'b011: result = {1'b0 repeat XLEN - 1, op1 <: op2};
                3'b100: result = op1 ^ op2;
                3'b101: result = if ctrl.funct7 == 0 {
                            srl
                        } else {
                            sra
                        };
                3'b110 : result = op1 | op2;
                3'b111 : result = op1 & op2;
                default: result = 'x;
            }
        } else {
            result = add;
        }
    }
}
