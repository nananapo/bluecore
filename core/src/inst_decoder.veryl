import eei::*;
import corectrl::*;

module inst_decoder (
    bits: input  Inst    ,
    ctrl: output InstCtrl,
    imm : output UIntX   ,
) {
    // 即値の生成
    let imm_i_g: logic<12> = bits[31:20];
    let imm_s_g: logic<12> = {bits[31:25], bits[11:7]};
    let imm_b_g: logic<12> = {bits[31], bits[7], bits[30:25], bits[11:8]};
    let imm_u_g: logic<20> = bits[31:12];
    let imm_j_g: logic<20> = {bits[31], bits[19:12], bits[20], bits[30:21]};

    let imm_i: UIntX = {bits[31] repeat XLEN - $bits(imm_i_g), imm_i_g};
    let imm_s: UIntX = {bits[31] repeat XLEN - $bits(imm_s_g), imm_s_g};
    let imm_b: UIntX = {bits[31] repeat XLEN - $bits(imm_b_g) - 1, imm_b_g, 1'b0};
    let imm_u: UIntX = {bits[31] repeat XLEN - $bits(imm_u_g) - 12, imm_u_g, 12'b0};
    let imm_j: UIntX = {bits[31] repeat XLEN - $bits(imm_j_g) - 1, imm_j_g, 1'b0};

    let op: logic<7> = bits[6:0];
    let f7: logic<7> = bits[31:25];
    let f3: logic<3> = bits[14:12];

    const T: logic = 1'b1;
    const F: logic = 1'b0;

    always_comb {
    // #@@range_begin(imm)
    imm = case op {
        OP_LUI, OP_AUIPC       : imm_u,
        OP_JAL                 : imm_j,
        OP_JALR, OP_LOAD       : imm_i,
        OP_OP_IMM, @<b>|OP_OP_IMM_32|: imm_i,
        OP_BRANCH              : imm_b,
        OP_STORE               : imm_s,
        default                : 'x,
    };
    // #@@range_end(imm)
    // #@@range_begin(ctrl)
                                       is_op32を追加
    ctrl = {case op {                        ↓
        OP_LUI      : {InstType::U, T, T, F, @<b>|F|, F, F, F},
        OP_AUIPC    : {InstType::U, T, F, F, @<b>|F|, F, F, F},
        OP_JAL      : {InstType::J, T, F, F, @<b>|F|, T, F, F},
        OP_JALR     : {InstType::I, T, F, F, @<b>|F|, T, F, F},
        OP_BRANCH   : {InstType::B, F, F, F, @<b>|F|, F, F, F},
        OP_LOAD     : {InstType::I, T, F, F, @<b>|F|, F, T, F},
        OP_STORE    : {InstType::S, F, F, F, @<b>|F|, F, F, F},
        OP_OP       : {InstType::R, T, F, T, @<b>|F|, F, F, F},
        OP_OP_IMM   : {InstType::I, T, F, T, @<b>|F|, F, F, F},
        @<b>|OP_OP_32    : {InstType::R, T, F, T, @<b>|T|, F, F, F},| @<balloon>{追加}
        @<b>|OP_OP_IMM_32: {InstType::I, T, F, T, @<b>|T|, F, F, F},| @<balloon>{追加}
        OP_SYSTEM   : {InstType::I, T, F, F, @<b>|F|, F, F, T},
        default     : {InstType::X, F, F, F, @<b>|F|, F, F, F},
    }, f3, f7};
    // #@@range_end(ctrl)
    }
}
