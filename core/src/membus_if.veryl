interface membus_if::<DATA_WIDTH: u32, ADDR_WIDTH: u32> {
    var valid : logic                            ;
    var ready : logic                            ;
    var addr  : logic            <ADDR_WIDTH>    ;
    var wen   : logic                            ;
    var wdata : logic            <DATA_WIDTH>    ;
    var wmask : logic            <DATA_WIDTH / 8>;
    var rvalid: logic                            ;
    var rdata : logic            <DATA_WIDTH>    ;
    // #@@range_begin(var)
    var expt  : eei::MemException                ;
    // #@@range_end(var)

    // #@@range_begin(master)
    modport master {
        ...
        @<b>|expt        : input ,|
        ...
    }
    // #@@range_end(master)

    // #@@range_begin(slave)
    modport slave {
        ...
        @<b>|expt        : output,|
        ...
    }
    // #@@range_end(slave)

    // get expanded wmask
    function wmask_expand () -> logic<DATA_WIDTH> {
        var result: logic<DATA_WIDTH>;

        for i: u32 in 0..DATA_WIDTH {
            result[i] = wmask[i / 8];
        }
        return result;
    }

    modport all_input {
        ..input
    }

    // #@@range_begin(response)
    modport response {
        rvalid: output,
        rdata : output,
        expt  : output,
    }
    // #@@range_end(response)

    modport slave_output {
        ready: output,
        ..same(response)
    }

    modport master_output {
        valid: output,
        addr : output,
        wen  : output,
        wdata: output,
        wmask: output,
    }
}

alias interface Membus = membus_if::<eei::MEMBUS_DATA_WIDTH, eei::XLEN>;
