// #@@range_begin(port)
module fifo #(
    param DATA_TYPE: type = logic,
    param WIDTH    : u32  = 2    ,
) (
    clk   : input  clock    ,
    rst   : input  reset    ,
    @<b>|flush : input  logic    ,|
    wready: output logic    ,
// #@@range_end(port)
    wvalid: input  logic    ,
    wdata : input  DATA_TYPE,
    rready: input  logic    ,
    rvalid: output logic    ,
    rdata : output DATA_TYPE,
) {
    // 2つ以上空きがあるかどうか
    var wready_two: logic;

    if WIDTH == 1 :width_one {
        always_comb {
            wready     = !rvalid || rready;
            wready_two = 0;
        }
    // #@@range_begin(always_one)
    always_ff {
        if_reset {
            rvalid = 0;
        } else {
            @<b>|if flush {|
            @<b>|    rvalid = 0;|
            @<b>|} else {|
                if wready && wvalid {
                    rdata  = wdata;
                    rvalid = 1;
                } else if rready {
                    rvalid = 0;
                }
            @<b>|}|
        }
    }
    // #@@range_end(always_one)
    } else {
        type Ptr = logic<WIDTH>;

        var head      : Ptr;
        var tail      : Ptr;
        let tail_plus1: Ptr = tail + 1 as Ptr;
        let tail_plus2: Ptr = tail + 2 as Ptr;

        var mem: DATA_TYPE [2 ** WIDTH];

        always_comb {
            wready     = tail_plus1 != head;
            wready_two = wready && tail_plus2 != head;
            rvalid     = head != tail;
            rdata      = mem[head];
        }

    // #@@range_begin(always_two)
    always_ff {
        if_reset {
            head = 0;
            tail = 0;
        } else {
            @<b>|if flush {|
            @<b>|    head = 0;|
            @<b>|    tail = 0;|
            @<b>|} else {|
                if wready && wvalid {
                    mem[tail] = wdata;
                    tail      = tail + 1;
                }
                if rready && rvalid {
                    head = head + 1;
                }
            @<b>|}|
        }
    }
    // #@@range_end(always_two)
    }
}
