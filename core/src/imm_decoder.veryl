module imm_decoder (
    data : input  conf::Inst ,
    imm_i: output conf::UIntX,
    imm_s: output conf::UIntX,
    imm_b: output conf::UIntX,
    imm_j: output conf::UIntX,
    imm_u: output conf::UIntX,
    imm_z: output conf::UIntX,
) {

    let imm_i_g: logic<12> = data[31:20];
    let imm_s_g: logic<12> = {data[31:25], data[11:7]};
    let imm_b_g: logic<12> = {data[31], data[7], data[30:25], data[11:8]};
    let imm_j_g: logic<20> = {data[31], data[19:12], data[20], data[30:21]};
    let imm_u_g: logic<20> = data[31:12];
    let imm_z_g: logic<5>  = data[19:15];

    assign imm_i = {imm_i_g[msb] repeat conf::XLEN - $bits(imm_i_g), imm_i_g};
    assign imm_s = {imm_s_g[msb] repeat conf::XLEN - $bits(imm_s_g), imm_s_g};
    assign imm_b = {imm_b_g[msb] repeat conf::XLEN - $bits(imm_b_g) - 1, imm_b_g, 1'b0};
    assign imm_j = {imm_j_g[msb] repeat conf::XLEN - $bits(imm_j_g) - 1, imm_j_g, 1'b0};
    assign imm_u = {imm_u_g[msb] repeat conf::XLEN - $bits(imm_u_g) - 12, imm_u_g, 12'b0};
    assign imm_z = {1'b0 repeat conf::XLEN - $bits(imm_z_g), imm_z_g};

}
