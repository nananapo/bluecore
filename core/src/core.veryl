module core (
    clk: input logic,
    rst: input logic,
) {

    // clock count
    var clock_count: u64;

    // memory
    var mem_ready : logic       ;
    var mem_valid : logic       ;
    var mem_wen   : logic       ;
    var mem_addr  : conf::Addr  ;
    var mem_wdata : conf::UInt64;
    var mem_rvalid: logic       ;
    var mem_rdata : conf::UInt64;

    inst mem: $sv::memory (
        clk                           ,
        rst                           ,
        valid : mem_valid             ,
        wen   : mem_wen               ,
        addr  : mem_addr[16 + 3 - 1:3],
        wdata : mem_wdata             ,
        rvalid: mem_rvalid            ,
        rdata : mem_rdata             ,
    );

    // TODO impl arbiter
    assign mem_ready = 1;

    // program counter
    var if_pc          : conf::Addr;
    var if_is_requested: logic     ;
    var if_requested_pc: conf::Addr;

    // if -> id queue
    struct if_idq_type {
        addr   : conf::Addr,
        instbit: conf::Inst,
    }
    var if_idq_wready: logic      ;
    var if_idq_wvalid: logic      ;
    var if_idq_wdata : if_idq_type;
    var if_idq_rready: logic      ;
    var if_idq_rvalid: logic      ;
    var if_idq_rdata : if_idq_type;

    always_comb {
        mem_valid = if_idq_wready & mem_ready & (!if_is_requested | mem_rvalid);
        mem_addr  = if mem_rvalid {
            if_pc
        } else {
            if_requested_pc
        };
    }

    // fetched inst
    let if_fetch_inst: conf::Inst = if (if_requested_pc[2] == 0) {
        mem_rdata[31:0]
    } else {
        mem_rdata[63:32]
    };

    // if -> id queue
    always_comb {
        if_idq_wvalid        = if_is_requested & mem_rvalid;
        if_idq_wdata.addr    = if_requested_pc;
        if_idq_wdata.instbit = if_fetch_inst;
        if_idq_rready        = 1;
    }

    /*
    // TODO veryl not support task (function emits blocking assignment...)
    task try_start_fetch() {
        if (mem_ready & if_idq_wready) {
            if_pc           = if_pc + 4;
            if_is_requested = 1;
            if_requested_pc = if_pc;
        } else {
            if_is_requested = 0;
        }
    }
    */

    var id_ctrl: stage::InstCtrl;

    always_ff (clk, rst) {
        if_reset {
            $display       ("reset!");
            mem_wen         = 0;
            if_pc           = 0;
            if_is_requested = 0;
            if_requested_pc = 0;
            clock_count     = 0;
        } else {
            $display   ("------------------ clock %0d", clock_count);
            clock_count = clock_count + 1;
            // fetch stage
            if (if_is_requested) {
                if mem_rvalid {
                    $display("fetched: %h:%h", if_requested_pc, if_fetch_inst);
                    // try_start_fetch();
                    if (mem_ready & if_idq_wready) {
                        if_pc           = if_pc + 4;
                        if_is_requested = 1;
                        if_requested_pc = if_pc;
                    } else {
                        if_is_requested = 0;
                    }
                }
            } else {
                // try_start_fetch();
                if (mem_ready & if_idq_wready) {
                    if_pc           = if_pc + 4;
                    if_is_requested = 1;
                    if_requested_pc = if_pc;
                } else {
                    if_is_requested = 0;
                }
            }

            if (if_idq_rvalid) {
                $display("Decode Stage ---");
                $display("%h:%h", if_idq_rdata.addr, if_idq_rdata.instbit);
                $display("is_legal  : %2d", id_ctrl.is_legal);
                $display("alu_cmd   : %2d", id_ctrl.alu_cmd);
                $display("br_cmd    : %2d", id_ctrl.br_cmd);
                $display("is_signed : %2d", id_ctrl.is_signed);
                $display("op1_sel   : %2d", id_ctrl.op1_sel);
                $display("op2_sel   : %2d", id_ctrl.op2_sel);
                $display("use_rs2   : %2d", id_ctrl.use_rs2);
                $display("mem_cmd   : %2d", id_ctrl.mem_cmd);
                $display("mem_size  : %2d", id_ctrl.mem_size);
                $display("csr_cmd   : %2d", id_ctrl.csr_cmd);
                $display("rf_wen    : %2d", id_ctrl.rf_wen);
                $display("wb_sel    : %2d", id_ctrl.wb_sel);
            }
        }
    }

    inst decode_unit: decoder (
        instbit: if_idq_rdata.instbit,
        ctrl   : id_ctrl             ,
    );

    inst fifo_fetch_decode: fifo #(
        Width       : 3          ,
        DataType    : if_idq_type,
        FutureWReady: 1          ,
    ) (
        clk                  ,
        rst                  ,
        wready: if_idq_wready,
        wvalid: if_idq_wvalid,
        wdata : if_idq_wdata ,
        rready: if_idq_rready,
        rvalid: if_idq_rvalid,
        rdata : if_idq_rdata ,
    );
}
