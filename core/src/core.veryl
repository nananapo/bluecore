import eei::*;
import corectrl::*;

module core (
    clk     : input   clock                                    ,
    rst     : input   reset                                    ,
    i_membus: modport membus_if::<ILEN, XLEN>::master          ,
    d_membus: modport membus_if::<MEM_DATA_WIDTH, XLEN>::master,
    led     : output  UIntX                                    ,
) {

    // ifのFIFOのデータ型
    struct if_fifo_type {
        addr: Addr,
        bits: Inst,
    }

    struct exq_type {
        addr: Addr    ,
        bits: Inst    ,
        ctrl: InstCtrl,
        imm : UIntX   ,
    }

    struct memq_type {
        addr      : Addr       ,
        bits      : Inst       ,
        ctrl      : InstCtrl   ,
        imm       : UIntX      ,
        alu_result: UIntX      ,
        rs1_addr  : logic   <5>,
        rs1_data  : UIntX      ,
        rs2_data  : UIntX      ,
        br_taken  : logic      ,
        jump_addr : Addr       ,
    }

    struct wbq_type {
        addr      : Addr    ,
        bits      : Inst    ,
        ctrl      : InstCtrl,
        imm       : UIntX   ,
        alu_result: UIntX   ,
        mem_rdata : UIntX   ,
        csr_rdata : UIntX   ,
    }

    // 命令メモリ -> IFのFIFO
    var if_fifo_wready    : logic       ;
    var if_fifo_wready_two: logic       ;
    var if_fifo_wvalid    : logic       ;
    var if_fifo_wdata     : if_fifo_type;
    var if_fifo_rready    : logic       ;
    var if_fifo_rvalid    : logic       ;
    var if_fifo_rdata     : if_fifo_type;

    // ID -> EXのFIFO
    var exq_wready: logic   ;
    var exq_wvalid: logic   ;
    var exq_wdata : exq_type;
    var exq_rready: logic   ;
    var exq_rvalid: logic   ;
    var exq_rdata : exq_type;

    // EX -> MEMのFIFO
    var memq_wready: logic    ;
    var memq_wvalid: logic    ;
    var memq_wdata : memq_type;
    var memq_rready: logic    ;
    var memq_rvalid: logic    ;
    var memq_rdata : memq_type;

    // MEM -> WBのFIFO
    var wbq_wready: logic   ;
    var wbq_wvalid: logic   ;
    var wbq_wdata : wbq_type;
    var wbq_rready: logic   ;
    var wbq_rvalid: logic   ;
    var wbq_rdata : wbq_type;


    ///////////////////////////////// IF Stage /////////////////////////////////

    var if_pc          : Addr ;
    var if_is_requested: logic; // フェッチ中かどうか
    var if_pc_requested: Addr ; // 要求したアドレス

    let if_pc_next: Addr = if_pc + 4;

    var control_hazard        : logic;
    var control_hazard_pc_next: Addr ;

    // フェッチした命令を格納するFIFO
    inst if_fifo: fifo #(
        DATA_TYPE: if_fifo_type,
        WIDTH    : 3           ,
    ) (
        clk                           ,
        rst                           ,
        flush     : control_hazard    ,
        wready    : if_fifo_wready    ,
        wready_two: if_fifo_wready_two,
        wvalid    : if_fifo_wvalid    ,
        wdata     : if_fifo_wdata     ,
        rready    : if_fifo_rready    ,
        rvalid    : if_fifo_rvalid    ,
        rdata     : if_fifo_rdata     ,
    );

    // 命令フェッチ処理
    always_comb {
        // FIFOに2個以上空きがあるとき、命令をフェッチする
        i_membus.valid = if_fifo_wready_two;
        i_membus.addr  = if_pc;
        i_membus.wen   = 0;
        i_membus.wdata = 'x; // wdataは使用しない
    }

    always_ff {
        if_reset {
            if_pc           = 0;
            if_is_requested = 0;
            if_pc_requested = 0;
            if_fifo_wvalid  = 0;
            if_fifo_wdata   = 0;
        } else {
            if control_hazard {
                if_pc           = control_hazard_pc_next;
                if_is_requested = 0;
                if_fifo_wvalid  = 0;
            } else {
                if if_is_requested {
                    if i_membus.rvalid {
                        if_is_requested = i_membus.ready && i_membus.valid;
                        if i_membus.ready && i_membus.valid {
                            if_pc           = if_pc_next;
                            if_pc_requested = if_pc;
                        }
                    }
                } else {
                    if i_membus.ready && i_membus.valid {
                        if_is_requested = 1;
                        if_pc           = if_pc_next;
                        if_pc_requested = if_pc;
                    }
                }
                // IFのFIFOの制御
                if if_is_requested && i_membus.rvalid {
                    if_fifo_wvalid     = 1;
                    if_fifo_wdata.addr = if_pc_requested;
                    if_fifo_wdata.bits = i_membus.rdata;
                } else {
                    if if_fifo_wvalid && if_fifo_wready {
                        if_fifo_wvalid = 0;
                    }
                }
            }
        }
    }

    ///////////////////////////////// ID Stage /////////////////////////////////

    let ids_valid    : logic    = if_fifo_rvalid;
    let ids_pc       : Addr     = if_fifo_rdata.addr;
    let ids_inst_bits: Inst     = if_fifo_rdata.bits;
    var ids_ctrl     : InstCtrl;
    var ids_imm      : UIntX   ;

    inst decoder: inst_decoder (
        bits: ids_inst_bits,
        ctrl: ids_ctrl     ,
        imm : ids_imm      ,
    );

    always_comb {
        // ID -> EX
        if_fifo_rready = exq_wready;
        exq_wvalid     = if_fifo_rvalid;
        exq_wdata.addr = if_fifo_rdata.addr;
        exq_wdata.bits = if_fifo_rdata.bits;
        exq_wdata.ctrl = ids_ctrl;
        exq_wdata.imm  = ids_imm;
    }

    ///////////////////////////////// EX Stage /////////////////////////////////

    let exs_valid    : logic    = exq_rvalid;
    let exs_pc       : Addr     = exq_rdata.addr;
    let exs_inst_bits: Inst     = exq_rdata.bits;
    let exs_ctrl     : InstCtrl = exq_rdata.ctrl;
    let exs_imm      : UIntX    = exq_rdata.imm;

    // レジスタ
    var regfile: UIntX<32>;

    // レジスタ番号
    let exs_rs1_addr: logic<5> = exs_inst_bits[19:15];
    let exs_rs2_addr: logic<5> = exs_inst_bits[24:20];

    // ソースレジスタのデータ
    let exs_rs1_data: UIntX = if exs_rs1_addr == 0 ? 0 : regfile[exs_rs1_addr];
    let exs_rs2_data: UIntX = if exs_rs2_addr == 0 ? 0 : regfile[exs_rs2_addr];

    // データハザード
    let exs_mem_data_hazard: logic = mems_valid && mems_ctrl.rwb_en && (mems_rd_addr == exs_rs1_addr || mems_rd_addr == exs_rs2_addr);
    let exs_wb_data_hazard : logic = wbs_valid && wbs_ctrl.rwb_en && (wbs_rd_addr == exs_rs1_addr || wbs_rd_addr == exs_rs2_addr);
    let exs_data_hazard    : logic = exs_mem_data_hazard || exs_wb_data_hazard;

    // ALU
    var exs_op1       : UIntX;
    var exs_op2       : UIntX;
    var exs_alu_result: UIntX;

    always_comb {
        case exs_ctrl.itype {
            InstType::R, InstType::B: {
                                          exs_op1 = exs_rs1_data;
                                          exs_op2 = exs_rs2_data;
                                      }
            InstType::I, InstType::S: {
                                          exs_op1 = exs_rs1_data;
                                          exs_op2 = exs_imm;
                                      }
            InstType::U, InstType::J: {
                                          exs_op1 = exs_pc;
                                          exs_op2 = exs_imm;
                                      }
            default: {
                         exs_op1 = 'x;
                         exs_op2 = 'x;
                     }
        }
    }

    inst alum: alu (
        ctrl  : exs_ctrl      ,
        op1   : exs_op1       ,
        op2   : exs_op2       ,
        result: exs_alu_result,
    );

    let exs_muldiv_valid : logic = exs_valid && exs_ctrl.is_muldiv && !exs_data_hazard && !exs_muldiv_is_requested;
    var exs_muldiv_ready : logic;
    var exs_muldiv_rvalid: logic;
    var exs_muldiv_result: UIntX;

    // #@@range_begin(mdu)
    inst mdu: muldivunit (
        clk                       ,
        rst                       ,
        valid  : exs_muldiv_valid ,
        ready  : exs_muldiv_ready ,
        funct3 : exs_ctrl.funct3  ,
        @<b>|is_op32: exs_ctrl.is_op32 ,|
        op1    : exs_op1          ,
        op2    : exs_op2          ,
        rvalid : exs_muldiv_rvalid,
        result : exs_muldiv_result,
    );
    // #@@range_end(mdu)

    var exs_muldiv_is_requested: logic;

    always_ff {
        if_reset {
            exs_muldiv_is_requested = 0;
        } else {
            // 次のステージに遷移
            if exq_rvalid && exq_rready {
                exs_muldiv_is_requested = 0;
            } else {
                // muldivunitにリクエストしたか判定する
                if exs_muldiv_valid && exs_muldiv_ready {
                    exs_muldiv_is_requested = 1;
                }
            }
        }
    }

    var exs_muldiv_rvalided: logic;
    let exs_muldiv_stall   : logic = exs_ctrl.is_muldiv && !exs_muldiv_rvalid && !exs_muldiv_rvalided;

    always_ff {
        if_reset {
            exs_muldiv_rvalided = 0;
        } else {
            // 次のステージに遷移
            if exq_rvalid && exq_rready {
                exs_muldiv_rvalided = 0;
            } else {
                // muldivunitの処理が完了していたら1にする
                exs_muldiv_rvalided |= exs_muldiv_rvalid;
            }
        }
    }

    var exs_brunit_take: logic;

    inst bru: brunit (
        funct3: exs_ctrl.funct3,
        op1   : exs_op1        ,
        op2   : exs_op2        ,
        take  : exs_brunit_take,
    );

    let exs_stall: logic = exs_data_hazard || exs_muldiv_stall;

    always_comb {
        // EX -> MEM
        exq_rready            = memq_wready && !exs_stall;
        memq_wvalid           = exq_rvalid && !exs_stall;
        memq_wdata.addr       = exq_rdata.addr;
        memq_wdata.bits       = exq_rdata.bits;
        memq_wdata.ctrl       = exq_rdata.ctrl;
        memq_wdata.imm        = exq_rdata.imm;
        memq_wdata.rs1_addr   = exs_rs1_addr;
        memq_wdata.rs1_data   = exs_rs1_data;
        memq_wdata.rs2_data   = exs_rs2_data;
        memq_wdata.alu_result = if exs_ctrl.is_muldiv ? exs_muldiv_result : exs_alu_result;
        memq_wdata.br_taken   = exs_ctrl.is_jump || inst_is_br(exs_ctrl) && exs_brunit_take;
        memq_wdata.jump_addr  = if inst_is_br(exs_ctrl) ? exs_pc + exs_imm : exs_alu_result & ~1;
    }

    ///////////////////////////////// MEM Stage /////////////////////////////////
    var mems_is_new   : logic      ;
    let mems_valid    : logic       = memq_rvalid;
    let mems_pc       : Addr        = memq_rdata.addr;
    let mems_inst_bits: Inst        = memq_rdata.bits;
    let mems_ctrl     : InstCtrl    = memq_rdata.ctrl;
    let mems_rd_addr  : logic   <5> = mems_inst_bits[11:7];

    assign control_hazard         = mems_valid && (csru_raise_trap || mems_ctrl.is_jump || memq_rdata.br_taken);
    assign control_hazard_pc_next = if csru_raise_trap ? csru_trap_vector : memq_rdata.jump_addr;

    always_ff {
        if_reset {
            mems_is_new = 0;
        } else {
            if memq_rvalid {
                mems_is_new = memq_rready;
            } else {
                mems_is_new = 1;
            }
        }
    }

    var memu_rdata: UIntX;
    var memu_stall: logic;

    inst memu: memunit (
        clk                          ,
        rst                          ,
        valid : mems_valid           ,
        is_new: mems_is_new          ,
        ctrl  : mems_ctrl            ,
        addr  : memq_rdata.alu_result,
        rs2   : memq_rdata.rs2_data  ,
        rdata : memu_rdata           ,
        stall : memu_stall           ,
        membus: d_membus             ,
    );

    var csru_rdata      : UIntX;
    var csru_raise_trap : logic;
    var csru_trap_vector: Addr ;

    inst csru: csrunit (
        clk                            ,
        rst                            ,
        valid   : mems_valid           ,
        pc      : mems_pc              ,
        ctrl    : mems_ctrl            ,
        rd_addr : mems_rd_addr         ,
        csr_addr: mems_inst_bits[31:20],
        rs1     : if mems_ctrl.funct3[2] == 1 && mems_ctrl.funct3[1:0] != 0 ?
            {1'b0 repeat XLEN - $bits(memq_rdata.rs1_addr), memq_rdata.rs1_addr} // rs1を0で拡張する
        :
            memq_rdata.rs1_data
        ,
        rdata      : csru_rdata      ,
        raise_trap : csru_raise_trap ,
        trap_vector: csru_trap_vector,
        led                          ,
    );

    always_comb {
        // MEM -> WB
        memq_rready          = wbq_wready && !memu_stall;
        wbq_wvalid           = memq_rvalid && !memu_stall;
        wbq_wdata.addr       = memq_rdata.addr;
        wbq_wdata.bits       = memq_rdata.bits;
        wbq_wdata.ctrl       = memq_rdata.ctrl;
        wbq_wdata.imm        = memq_rdata.imm;
        wbq_wdata.alu_result = memq_rdata.alu_result;
        wbq_wdata.mem_rdata  = memu_rdata;
        wbq_wdata.csr_rdata  = csru_rdata;
    }

    ///////////////////////////////// WB Stage /////////////////////////////////
    let wbs_valid    : logic    = wbq_rvalid;
    let wbs_pc       : Addr     = wbq_rdata.addr;
    let wbs_inst_bits: Inst     = wbq_rdata.bits;
    let wbs_ctrl     : InstCtrl = wbq_rdata.ctrl;
    let wbs_imm      : UIntX    = wbq_rdata.imm;

    let wbs_rd_addr: logic<5> = wbs_inst_bits[11:7];
    let wbs_wb_data: UIntX    = if wbs_ctrl.is_lui ?
        wbs_imm
    : if wbs_ctrl.is_jump ?
        wbs_pc + 4
    : if wbs_ctrl.is_load ?
        wbq_rdata.mem_rdata
    : if wbs_ctrl.is_csr ?
        wbq_rdata.csr_rdata
    :
        wbq_rdata.alu_result
    ;

    always_ff {
        if wbs_valid && wbs_ctrl.rwb_en {
            regfile[wbs_rd_addr] = wbs_wb_data;
        }
    }

    always_comb {
        // WB -> END
        wbq_rready = 1;
    }

    ///////////////////////////////// DEBUG /////////////////////////////////
    var clock_count: u64;

    always_ff {
        if_reset {
            clock_count = 1;
        } else {
            clock_count = clock_count + 1;

            $display("");
            $display("# %d", clock_count);

            $display("IF ------");
            $display("     pc : %h", if_pc);
            $display(" is req : %b", if_is_requested);
            $display(" pc req : %h", if_pc_requested);
            $display("ID ------");
            if ids_valid {
                $display("  %h : %h", ids_pc, if_fifo_rdata.bits);
                $display("  itype : %b", ids_ctrl.itype);
                $display("  imm   : %h", ids_imm);
            }
            $display("EX -----");
            if exs_valid {
                $display("  %h : %h", exq_rdata.addr, exq_rdata.bits);
                $display("  op1     : %h", exs_op1);
                $display("  op2     : %h", exs_op2);
                $display("  alu     : %h", exs_alu_result);
                $display("  dhazard : %b", exs_data_hazard);
                $display("  muldiv  : %b", exs_muldiv_stall);
                if exs_ctrl.is_muldiv && exs_muldiv_rvalid {
                    $display("  muldiv result : %h", exs_muldiv_result);
                }
                if inst_is_br(exs_ctrl) {
                    $display("  br take : ", exs_brunit_take);
                }
            }
            $display("MEM -----");
            if mems_valid {
                $display("  %h : %h", memq_rdata.addr, memq_rdata.bits);
                $display("  mem stall : %b", memu_stall);
                $display("  mem rdata : %h", memu_rdata);
                if mems_ctrl.is_csr {
                    $display("  csr rdata : %h", csru_rdata);
                    $display("  csr trap  : %b", csru_raise_trap);
                    $display("  csr vec   : %h", csru_trap_vector);
                }
                if memq_rdata.br_taken {
                    $display("  JUMP TO   : %h", memq_rdata.jump_addr);
                }
            }
            $display("WB ----");
            if wbs_valid {
                $display("  %h : %h", wbq_rdata.addr, wbq_rdata.bits);
                if wbs_ctrl.rwb_en {
                    $display("  reg[%d] <= %h", wbs_rd_addr, wbs_wb_data);
                }
            }
        }
    }

    ///////////////////////////////// FIFO /////////////////////////////////

    inst id_ex_fifo: fifo #(
        DATA_TYPE: exq_type,
        WIDTH    : 1       ,
    ) (
        clk                   ,
        rst                   ,
        flush : control_hazard,
        wready: exq_wready    ,
        wvalid: exq_wvalid    ,
        wdata : exq_wdata     ,
        rready: exq_rready    ,
        rvalid: exq_rvalid    ,
        rdata : exq_rdata     ,
    );

    inst ex_mem_fifo: fifo #(
        DATA_TYPE: memq_type,
        WIDTH    : 1        ,
    ) (
        clk                   ,
        rst                   ,
        flush : control_hazard,
        wready: memq_wready   ,
        wvalid: memq_wvalid   ,
        wdata : memq_wdata    ,
        rready: memq_rready   ,
        rvalid: memq_rvalid   ,
        rdata : memq_rdata    ,
    );

    inst mem_wb_fifo: fifo #(
        DATA_TYPE: wbq_type,
        WIDTH    : 1       ,
    ) (
        clk               ,
        rst               ,
        flush : 0         ,
        wready: wbq_wready,
        wvalid: wbq_wvalid,
        wdata : wbq_wdata ,
        rready: wbq_rready,
        rvalid: wbq_rvalid,
        rdata : wbq_rdata ,
    );
}
