module core (
    clk: input logic,
    rst: input logic,
) {

    var mem_valid : logic       ;
    var mem_wen   : logic       ;
    var mem_addr  : conf::Addr  ;
    var mem_wdata : conf::UInt64;
    var mem_rvalid: logic       ;
    var mem_rdata : conf::UInt64;

    inst mem: $sv::memory (
        clk                           ,
        rst                           ,
        valid : mem_valid             ,
        wen   : mem_wen               ,
        addr  : mem_addr[16 + 3 - 1:3],
        wdata : mem_wdata             ,
        rvalid: mem_rvalid            ,
        rdata : mem_rdata             ,
    );

    // program counter
    var if_pc          : conf::Addr;
    var if_is_requested: logic     ;
    var if_requested_pc: conf::Addr;

    assign mem_addr = if mem_rvalid {
        if_pc
    } else {
        if_requested_pc
    };

    // fetched inst
    let if_fetch_inst: conf::Inst = if (if_requested_pc[2] == 0) {
        mem_rdata[31:0]
    } else {
        mem_rdata[63:32]
    };

    always_ff (clk, rst) {
        if_reset {
            $display       ("reset!");
            mem_valid       = 0;
            mem_wen         = 0;
            if_pc           = 0;
            if_is_requested = 0;
            if_requested_pc = 0;
        } else {
            if (if_is_requested) {
                if mem_rvalid {
                    $display       ("Fetch pc:%h rdata:%h", if_requested_pc, if_fetch_inst);
                    if_pc           = if_pc + 4;
                    if_requested_pc = if_pc;
                }
            } else {
                mem_valid       = 1;
                if_pc           = if_pc + 4;
                if_is_requested = 1;
                if_requested_pc = if_pc;
            }

        }
    }
}
