import eei::*;
import corectrl::*;

module core (
    clk    : input   clock            ,
    rst    : input   reset            ,
    ibus_if: modport membus_if::master,
    dbus_if: modport membus_if::master,
) {
    // レジスタ
    var registers: UIntX<32>;

    struct wb_context {
        valid: logic   ,
        addr : logic<5>,
        data : UIntX   ,
    }

    struct idq_type {
        addr    : Addr,
        instbits: Inst,
    }

    struct exq_type {
        addr    : Addr      ,
        instbits: Inst      ,
        ctrl    : InstCtrl  ,
        imm     : UIntX     ,
        op1     : UIntX     ,
        op2     : UIntX     ,
        rs2     : UIntX     ,
        wbctx   : wb_context,
    }

    struct memq_type {
        addr     : Addr      ,
        instbits : Inst      ,
        ctrl     : InstCtrl  ,
        alu_out  : UIntX     ,
        br_taken : logic     ,
        br_target: Addr      ,
        pc_next  : Addr      ,
        pc_inc   : Addr      ,
        op       : UIntX     ,
        imm      : UIntX     ,
        wbctx    : wb_context,
    }

    struct wbq_type {
        addr    : Addr      ,
        instbits: Inst      ,
        ctrl    : InstCtrl  ,
        wbctx   : wb_context,
    }

    var idq_wready_next: logic   ;
    var idq_wvalid     : logic   ;
    var idq_wdata      : idq_type;
    var idq_rready     : logic   ;
    var idq_rvalid     : logic   ;
    var idq_rdata      : idq_type;

    var exq_wready: logic   ;
    var exq_wvalid: logic   ;
    var exq_wdata : exq_type;
    var exq_rready: logic   ;
    var exq_rvalid: logic   ;
    var exq_rdata : exq_type;

    var memq_wready: logic    ;
    var memq_wvalid: logic    ;
    var memq_wdata : memq_type;
    var memq_rready: logic    ;
    var memq_rvalid: logic    ;
    var memq_rdata : memq_type;

    var wbq_wready: logic   ;
    var wbq_wvalid: logic   ;
    var wbq_wdata : wbq_type;
    var wbq_rready: logic   ;
    var wbq_rvalid: logic   ;
    var wbq_rdata : wbq_type;

    // IFステージ
    var if_pc          : Addr ; // PC
    var if_is_requested: logic; // フェッチ中かどうか
    var if_requested_pc: Addr ; // フェッチ中のPC

    // フェッチ命令
    always_comb {
        ibus_if.valid = idq_wready_next & (!if_is_requested | ibus_if.resp_valid);
        ibus_if.addr  = if_pc;
        ibus_if.wen   = 0;
        ibus_if.wdata = 'x; // 命令フェッチは書き込まない
        ibus_if.wmask = 0;
    }

    // IFステージ -> IDステージ
    always_comb {
        idq_wvalid         = if_is_requested & ibus_if.resp_valid;
        idq_rready         = exq_wvalid & exq_wready;
        idq_wdata.addr     = if_requested_pc;
        idq_wdata.instbits = ibus_if.resp_rdata;
    }

    // IDステージ
    // 使用するレジスタのアドレス
    let id_rd_addr : logic<5> = idq_rdata.instbits[11:7];
    let id_rs1_addr: logic<5> = idq_rdata.instbits[19:15];
    let id_rs2_addr: logic<5> = idq_rdata.instbits[24:20];

    var id_ctrl: InstCtrl;
    var id_imm : UIntX   ;
    var id_rs1 : UIntX   ;
    var id_rs2 : UIntX   ;

    var id_op1: UIntX;
    var id_op2: UIntX;

    always_comb {
        case id_ctrl.insttype {
            InstType::R, InstType::B: {
                                          id_op1 = id_rs1;
                                          id_op2 = id_rs2;
                                      }
            InstType::I, InstType::S: {
                                          id_op1 = id_rs1;
                                          id_op2 = id_imm;
                                      }
            InstType::U, InstType::J: {
                                          id_op1 = idq_rdata.addr;
                                          id_op2 = id_imm;
                                      }
            default: {
                         id_op1 = 'x;
                         id_op2 = 'x;
                     }
        }
    }

    // データ依存性があるときはストールする
    var id_dh_rs1: logic;
    var id_dh_rs2: logic;
    let id_stall : logic = id_dh_rs1 | id_dh_rs2;

    // IDステージ -> EXステージ
    always_comb {
        exq_wvalid         = idq_rvalid & !id_stall;
        exq_rready         = memq_wvalid & memq_wready;
        exq_wdata.addr     = idq_rdata.addr;
        exq_wdata.instbits = idq_rdata.instbits;
        exq_wdata.ctrl     = id_ctrl;
        exq_wdata.imm      = id_imm;
        exq_wdata.op1      = id_op1;
        exq_wdata.op2      = id_op2;
        exq_wdata.rs2      = id_rs2;
        // LUI, BRANCH, JUMPは、IDステージでライトバックする値が確定する
        exq_wdata.wbctx.valid = inst_is_lui(id_ctrl) | inst_is_branch(id_ctrl) | inst_is_jump(id_ctrl);
        exq_wdata.wbctx.addr  = id_rd_addr;
        exq_wdata.wbctx.data  = if inst_is_lui(id_ctrl) {
            id_imm
        } else {
            idq_rdata.addr + 4
        };
    }

    // EXステージ
    var ex_alu_out : UIntX;
    var ex_br_taken: logic;

    let ex_stall: logic = !idq_rvalid; // IDステージがvalidになるのを待つ

    // EXステージ -> MEMステージ
    always_comb {
        memq_wvalid         = exq_rvalid & !ex_stall;
        memq_rready         = wbq_wvalid & wbq_wready;
        memq_wdata.addr     = exq_rdata.addr;
        memq_wdata.instbits = exq_rdata.instbits;
        memq_wdata.ctrl     = exq_rdata.ctrl;
        memq_wdata.alu_out  = ex_alu_out;
        // 分岐するかどうか (分岐命令かつtake == 1 または ジャンプ命令)
        memq_wdata.br_taken = inst_is_branch(exq_rdata.ctrl) & ex_br_taken | exq_rdata.ctrl.is_jump;
        // 分岐先
        // * 分岐命令ならaddr + imm_b
        // * ジャンプ命令ならALUの計算結果
        memq_wdata.br_target = if inst_is_branch(exq_rdata.ctrl) {
            exq_rdata.addr + exq_rdata.imm
        } else {
            ex_alu_out
        } & ~1;
        memq_wdata.pc_next = idq_rdata.addr;
        memq_wdata.pc_inc  = exq_rdata.addr + 4;
        // MEMステージで、
        // * CSRモジュールはOP1を使う
        // * メモリモジュールはRS2を使う
        memq_wdata.op = if exq_rdata.ctrl.is_system {
            exq_rdata.op1
        } else {
            exq_rdata.rs2
        };
        memq_wdata.imm = exq_rdata.imm;
        // メモリ命令, CSR命令以外は、EXEステージでライトバックする値が確定する
        memq_wdata.wbctx.valid = exq_rdata.wbctx.valid | !(inst_is_memory_op(exq_rdata.ctrl) | inst_is_csr_op(exq_rdata.ctrl));
        memq_wdata.wbctx.addr  = exq_rdata.wbctx.addr;
        memq_wdata.wbctx.data  = if exq_rdata.wbctx.valid {
            exq_rdata.wbctx.data
        } else {
            ex_alu_out
        };
    }

    // MEMステージ
    var mem_is_new   : logic; // ステージに供給された命令が新しく供給されたものかどうか
    var mem_mem_stall: logic;
    var mem_mem_rdata: UIntX;

    var mem_csr_rdata      : UIntX;
    var mem_csr_is_trap    : logic;
    var mem_csr_trap_vector: Addr ;

    // 正しい次のPC
    let mem_next_pc_expected: Addr = if !memq_rdata.br_taken {
        memq_rdata.pc_inc
    } else {
        memq_rdata.br_target
    };

    // 分岐ハザードが発生するかどうか
    let mem_is_branch_hazard: logic = memq_rvalid & mem_next_pc_expected != memq_rdata.pc_next;

    // MEMステージ -> WBステージ
    always_comb {
        // メモリがストールしていない場合に次のステージに進む
        wbq_wvalid         = memq_rvalid & !mem_mem_stall;
        wbq_rready         = 1;
        wbq_wdata.addr     = memq_rdata.addr;
        wbq_wdata.instbits = memq_rdata.instbits;
        wbq_wdata.ctrl     = memq_rdata.ctrl;
        // メモリ命令とCSR命令のライトバックする値を確定する
        wbq_wdata.wbctx.valid = 1;
        wbq_wdata.wbctx.addr  = memq_rdata.wbctx.addr;
        wbq_wdata.wbctx.data  = if memq_rdata.wbctx.valid {
            memq_rdata.wbctx.data
        } else if inst_is_memory_op(memq_rdata.ctrl) {
            mem_mem_rdata
        } else {
            mem_csr_rdata
        };
    }

    // 分岐ハザードかトラップのとき、MEMステージより前のステージをフラッシュする
    let flush_before_memstage: logic = mem_is_branch_hazard | mem_csr_is_trap;

    always_ff {
        if_reset {
            registers       = 0;
            if_pc           = 0;
            if_is_requested = 0;
            if_requested_pc = 0;
            mem_is_new      = 0;
        } else {
            // フラッシュ時の動作
            if flush_before_memstage {
                if_is_requested = 0; // 次のクロックでフェッチ開始する
                if_pc           = if mem_csr_is_trap {
                    mem_csr_trap_vector // トラップ
                } else {
                    mem_next_pc_expected // 分岐ハザード
                };
            } else {
                if ibus_if.ready & ibus_if.valid {
                    if_pc           = if_pc + 4;
                    if_is_requested = 1;
                    if_requested_pc = if_pc;
                } else {
                    if if_is_requested & ibus_if.resp_valid {
                        if_is_requested = 0;
                    }
                }
            }
            // MEMステージが新しいかどうかを更新
            if memq_rvalid {
                mem_is_new = memq_rready;
            } else {
                mem_is_new = 1;
            }
            // レジスタにライトバック
            if wbq_rvalid & wbq_rdata.ctrl.rf_wen {
                registers[wbq_rdata.wbctx.addr] = wbq_rdata.wbctx.data;
            }
        }
    }

    inst id_unit: inst_decode (
        bits: idq_rdata.instbits,
        ctrl: id_ctrl           ,
        imm : id_imm            ,
    );

    inst rs1_forward_unit: reg_forward (
        valid   : inst_use_rs1(id_ctrl) ,
        addr    : id_rs1_addr           ,
        reg_data: registers[id_rs1_addr],

        ex_valid : exq_rvalid & exq_rdata.ctrl.rf_wen,
        ex_can_fw: exq_rdata.wbctx.valid             ,
        ex_addr  : exq_rdata.wbctx.addr              ,
        ex_data  : exq_rdata.wbctx.data              ,

        mem_valid : memq_rvalid & memq_rdata.ctrl.rf_wen,
        mem_can_fw: memq_rdata.wbctx.valid              ,
        mem_addr  : memq_rdata.wbctx.addr               ,
        mem_data  : memq_rdata.wbctx.data               ,

        wb_valid : wbq_rvalid & wbq_rdata.ctrl.rf_wen,
        wb_can_fw: wbq_rdata.wbctx.valid             ,
        wb_addr  : wbq_rdata.wbctx.addr              ,
        wb_data  : wbq_rdata.wbctx.data              ,

        data_hazard: id_dh_rs1,
        result     : id_rs1   ,
    );

    inst rs2_forward_unit: reg_forward (
        valid   : inst_use_rs2(id_ctrl) ,
        addr    : id_rs2_addr           ,
        reg_data: registers[id_rs2_addr],

        ex_valid : exq_rvalid & exq_rdata.ctrl.rf_wen,
        ex_can_fw: exq_rdata.wbctx.valid             ,
        ex_addr  : exq_rdata.wbctx.addr              ,
        ex_data  : exq_rdata.wbctx.data              ,

        mem_valid : memq_rvalid & memq_rdata.ctrl.rf_wen,
        mem_can_fw: memq_rdata.wbctx.valid              ,
        mem_addr  : memq_rdata.wbctx.addr               ,
        mem_data  : memq_rdata.wbctx.data               ,

        wb_valid : wbq_rvalid & wbq_rdata.ctrl.rf_wen,
        wb_can_fw: wbq_rdata.wbctx.valid             ,
        wb_addr  : wbq_rdata.wbctx.addr              ,
        wb_data  : wbq_rdata.wbctx.data              ,

        data_hazard: id_dh_rs2,
        result     : id_rs2   ,
    );

    inst ex_alu: alu (
        ctrl  : exq_rdata.ctrl,
        op1   : exq_rdata.op1 ,
        op2   : exq_rdata.op2 ,
        result: ex_alu_out    ,
    );

    inst ex_alubr: alubr (
        funct3: exq_rdata.ctrl.funct3,
        op1   : exq_rdata.op1        ,
        op2   : exq_rdata.op2        ,
        take  : ex_br_taken          ,
    );

    inst mem_memunit: memunit (
        clk                         ,
        rst                         ,
        dbus_if                     ,
        valid   : memq_rvalid       ,
        is_new  : mem_is_new        ,
        ctrl    : memq_rdata.ctrl   ,
        rs2     : memq_rdata.op     ,
        addr    : memq_rdata.alu_out,
        is_stall: mem_mem_stall     ,
        rdata   : mem_mem_rdata     ,
    );

    inst mem_csrunit: csrunit (
        clk                               ,
        rst                               ,
        valid      : memq_rvalid          ,
        rdata      : mem_csr_rdata        ,
        raise_trap : mem_csr_is_trap      ,
        trap_vector: mem_csr_trap_vector  ,
        pc         : memq_rdata.addr      ,
        ctrl       : memq_rdata.ctrl      ,
        rd_addr    : memq_rdata.wbctx.addr,
        csr_addr   : memq_rdata.imm[16:5] ,
        rs1        : if inst_is_csr_imm(memq_rdata.ctrl) {
            // uimmを符号拡張する
            {memq_rdata.imm[4] repeat XLEN - 5, memq_rdata.imm[4:0]}
        } else {
            // opにrs1の値が格納されている
            memq_rdata.op
        },
    );

    // IFステージとIDステージをつなぐFIFO
    inst fifo_if_id: fifo #(
        Width   : 3       ,
        DataType: idq_type,
    ) (
        clk                                 ,
        rst   : rst & !flush_before_memstage,
        wready: _                           ,
        wvalid: idq_wvalid                  ,
        wdata : idq_wdata                   ,
        rready: idq_rready                  ,
        rvalid: idq_rvalid                  ,
        rdata : idq_rdata                   ,
    );

    assign idq_wready_next = fifo_if_id.wready_next;

    // IDステージとEXステージをつなぐレジスタ
    inst fifo_id_ex: fifo #(
        Width   : 0       ,
        DataType: exq_type,
    ) (
        clk                                 ,
        rst   : rst & !flush_before_memstage,
        wready: exq_wready                  ,
        wvalid: exq_wvalid                  ,
        wdata : exq_wdata                   ,
        rready: exq_rready                  ,
        rvalid: exq_rvalid                  ,
        rdata : exq_rdata                   ,
    );

    // EXステージとMEMステージをつなぐレジスタ
    inst fifo_ex_mem: fifo #(
        Width   : 0        ,
        DataType: memq_type,
    ) (
        clk                                         ,
        rst                                         ,
        wready: memq_wready                         ,
        wvalid: memq_wvalid & !flush_before_memstage,
        wdata : memq_wdata                          ,
        rready: memq_rready                         ,
        rvalid: memq_rvalid                         ,
        rdata : memq_rdata                          ,
    );

    // MEMステージとWBステージをつなぐレジスタ
    inst fifo_mem_wb: fifo #(
        Width   : 0       ,
        DataType: wbq_type,
    ) (
        clk               ,
        rst               ,
        wready: wbq_wready,
        wvalid: wbq_wvalid,
        wdata : wbq_wdata ,
        rready: wbq_rready,
        rvalid: wbq_rvalid,
        rdata : wbq_rdata ,
    );

    // 経過したクロック数
    var clock_count: i64;

    // ログの出力
    always_ff {
        if_reset {
            $display   ("RESET");
            clock_count = 0;
        } else {
            $display   ("------------------ clock %0d", clock_count);
            clock_count = clock_count + 1;

            $display("IF ---");
            if !flush_before_memstage {
                if if_is_requested & ibus_if.resp_valid {
                    $display("  fetched: %h:%h", if_requested_pc, ibus_if.resp_rdata);
                }
                if ibus_if.ready & ibus_if.valid {
                    $display("  request: %h", ibus_if.addr);
                }
            }
            $display("ID ---");
            if idq_rvalid {
                $display("  %h:%h", idq_rdata.addr, idq_rdata.instbits);
                $display("  stall     : %d", !exq_wvalid | !exq_wready);
                $display("  is_legal  : %2d", id_ctrl.is_legal);
                $display("  insttype  : %2d", id_ctrl.insttype);
                $display("  rf_wen    : %2d", id_ctrl.rf_wen);
                $display("  is_lui    : %2d", id_ctrl.is_lui);
                $display("  is_aluop  : %2d", id_ctrl.is_aluop);
                $display("  is_jump   : %2d", id_ctrl.is_jump);
                $display("  is_load   : %2d", id_ctrl.is_load);
                $display("  is_system : %2d", id_ctrl.is_system);
                $display("  is_fence  : %2d", id_ctrl.is_fence);
                $display("  funct3    : %b", id_ctrl.funct3);
                $display("  funct7    : %b", id_ctrl.funct7);
                $display("  op1       : %h", id_op1);
                $display("  op2       : %h", id_op2);
            }
            $display("EX ---");
            if exq_rvalid {
                $display("  %h:%h", exq_rdata.addr, exq_rdata.instbits);
                $display("  stall     : %d", !memq_wvalid | !memq_wready);
                $display("  funct3    : %2d", exq_rdata.ctrl.funct3);
                $display("  funct7    : %2d", exq_rdata.ctrl.funct7);
                $display("  is_aluop  : %2d", exq_rdata.ctrl.is_aluop);
                $display("  op1       : %h", exq_rdata.op1);
                $display("  op2       : %h", exq_rdata.op2);
                $display("  alu_out   : %h", ex_alu_out);
                $display("  br_take   : %h", ex_br_taken);
            }
            $display("MEM ---");
            if memq_rvalid {
                $display("  %h:%h", memq_rdata.addr, memq_rdata.instbits);
                $display("  stall        : %d", !wbq_wvalid | !wbq_wready);
                $display("  is_mem_op    : %d", inst_is_memory_op(memq_rdata.ctrl));
                $display("  is_csr_op    : %d", inst_is_csr_op(memq_rdata.ctrl));
                $display("  funct3       : %2d", memq_rdata.ctrl.funct3);
                $display("  mem_out      : %h", mem_mem_rdata);
                $display("  csr_out      : %h", mem_csr_rdata);
                if mem_csr_is_trap {
                    $display("  csr hazard: %h", mem_csr_trap_vector);
                } else if mem_is_branch_hazard {
                    $display("  branch hazard:");
                    $display("    expected:%h", mem_next_pc_expected);
                    $display("    actual  :%h", memq_rdata.pc_next);
                }
            }
            $display("WB ---");
            if wbq_rvalid {
                $display("  %h:%h", wbq_rdata.addr, wbq_rdata.instbits);
                if wbq_rdata.ctrl.rf_wen {
                    $display("  register[%d] <= %h", wbq_rdata.wbctx.addr, wbq_rdata.wbctx.data);
                }
            }
        }
    }

}
