module core (
    clk: input logic,
    rst: input logic,
) {

    var pc: conf::Addr;

    var mem_rvalid: logic       ;
    var mem_rdata : conf::UInt64;

    let mem_valid: logic        = 1;
    var mem_wen  : logic       ;
    let mem_addr : conf::Addr   = if mem_rvalid {
        pc
    } else {
        requested_pc
    };
    var mem_wdata: conf::UInt64;

    inst mem: $sv::memory (
        clk                           ,
        rst                           ,
        valid : mem_valid             ,
        wen   : mem_wen               ,
        addr  : mem_addr[16 + 3 - 1:3],
        wdata : mem_wdata             ,
        rvalid: mem_rvalid            ,
        rdata : mem_rdata             ,
    );

    var requested_pc: conf::Addr;

    // fetch
    always_ff (clk, rst) {
        if_reset {
            $display    ("reset!");
            pc           = 4;
            mem_wen      = 0;
            requested_pc = 0;
        } else {
            if mem_rvalid {
                pc           = pc + 4;
                requested_pc = pc;
                $display    ("pc:%h rdata:%h", requested_pc, mem_rdata);
            }
        }
    }
}
