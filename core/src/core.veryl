import eei::*;
import corectrl::*;

module core (
    clk     : input   clock               ,
    rst     : input   reset               ,
    i_membus: modport core_inst_if::master,
    d_membus: modport core_data_if::master,
    led     : output  UIntX               ,
    aclint  : modport aclint_if::slave    ,
) {

    struct exq_type {
        addr: Addr         ,
        bits: Inst         ,
        ctrl: InstCtrl     ,
        imm : UIntX        ,
        expt: ExceptionInfo,
    }

    struct memq_type {
        addr      : Addr            ,
        bits      : Inst            ,
        ctrl      : InstCtrl        ,
        imm       : UIntX           ,
        expt      : ExceptionInfo   ,
        alu_result: UIntX           ,
        rs1_addr  : logic        <5>,
        rs1_data  : UIntX           ,
        rs2_data  : UIntX           ,
        br_taken  : logic           ,
        jump_addr : Addr            ,
    }

    struct wbq_type {
        addr      : Addr    ,
        bits      : Inst    ,
        ctrl      : InstCtrl,
        imm       : UIntX   ,
        alu_result: UIntX   ,
        mem_rdata : UIntX   ,
        csr_rdata : UIntX   ,
        raise_trap: logic   ,
    }

    // ID -> EXのFIFO
    var exq_wready: logic   ;
    var exq_wvalid: logic   ;
    var exq_wdata : exq_type;
    var exq_rready: logic   ;
    var exq_rvalid: logic   ;
    var exq_rdata : exq_type;

    // EX -> MEMのFIFO
    var memq_wready: logic    ;
    var memq_wvalid: logic    ;
    var memq_wdata : memq_type;
    var memq_rready: logic    ;
    var memq_rvalid: logic    ;
    var memq_rdata : memq_type;

    // MEM -> WBのFIFO
    var wbq_wready: logic   ;
    var wbq_wvalid: logic   ;
    var wbq_wdata : wbq_type;
    var wbq_rready: logic   ;
    var wbq_rvalid: logic   ;
    var wbq_rdata : wbq_type;

    ///////////////////////////////// IF Stage /////////////////////////////////

    var control_hazard        : logic;
    var control_hazard_pc_next: Addr ;

    always_comb {
        i_membus.is_hazard = control_hazard;
        i_membus.next_pc   = control_hazard_pc_next;
    }

    ///////////////////////////////// ID Stage /////////////////////////////////

    let ids_valid     : logic    = i_membus.rvalid;
    let ids_pc        : Addr     = i_membus.raddr;
    let ids_inst_bits : Inst     = i_membus.rdata;
    var ids_inst_valid: logic   ;
    var ids_ctrl      : InstCtrl;
    var ids_imm       : UIntX   ;

    inst decoder: inst_decoder (
        bits  : ids_inst_bits  ,
        is_rvc: i_membus.is_rvc,
        valid : ids_inst_valid ,
        ctrl  : ids_ctrl       ,
        imm   : ids_imm        ,
    );

    always_comb {
        // ID -> EX
        i_membus.rready = exq_wready;
        exq_wvalid      = i_membus.rvalid;
        exq_wdata.addr  = i_membus.raddr;
        exq_wdata.bits  = i_membus.rdata;
        exq_wdata.ctrl  = ids_ctrl;
        exq_wdata.imm   = ids_imm;
        // exception
        exq_wdata.expt = 0;
        if !ids_inst_valid {
            // illegal instruction
            exq_wdata.expt.valid = 1;
            exq_wdata.expt.cause = CsrCause::ILLEGAL_INSTRUCTION;
            exq_wdata.expt.value = {1'b0 repeat XLEN - ILEN, ids_inst_bits};
        } else if ids_inst_bits == 32'h00000073 {
            // ECALL
            exq_wdata.expt.valid = 1;
            exq_wdata.expt.cause = CsrCause::ENVIRONMENT_CALL_FROM_M_MODE;
            exq_wdata.expt.value = 0;
        } else if ids_inst_bits == 32'h00100073 {
            // EBREAK
            exq_wdata.expt.valid = 1;
            exq_wdata.expt.cause = CsrCause::BREAKPOINT;
            exq_wdata.expt.value = ids_pc;
        }
    }

    ///////////////////////////////// EX Stage /////////////////////////////////

    let exs_valid    : logic    = exq_rvalid;
    let exs_pc       : Addr     = exq_rdata.addr;
    let exs_inst_bits: Inst     = exq_rdata.bits;
    let exs_ctrl     : InstCtrl = exq_rdata.ctrl;
    let exs_imm      : UIntX    = exq_rdata.imm;

    // レジスタ
    var regfile: UIntX<32>;

    // レジスタ番号
    let exs_rs1_addr: logic<5> = exs_inst_bits[19:15];
    let exs_rs2_addr: logic<5> = exs_inst_bits[24:20];

    // ソースレジスタのデータ
    let exs_rs1_data: UIntX = if exs_rs1_addr == 0 ? 0 : regfile[exs_rs1_addr];
    let exs_rs2_data: UIntX = if exs_rs2_addr == 0 ? 0 : regfile[exs_rs2_addr];

    // データハザード
    let exs_mem_data_hazard: logic = mems_valid && mems_ctrl.rwb_en && (mems_rd_addr == exs_rs1_addr || mems_rd_addr == exs_rs2_addr);
    let exs_wb_data_hazard : logic = wbs_valid && wbs_ctrl.rwb_en && (wbs_rd_addr == exs_rs1_addr || wbs_rd_addr == exs_rs2_addr);
    let exs_data_hazard    : logic = exs_mem_data_hazard || exs_wb_data_hazard;

    // ALU
    var exs_op1       : UIntX;
    var exs_op2       : UIntX;
    var exs_alu_result: UIntX;

    always_comb {
        case exs_ctrl.itype {
            InstType::R, InstType::B: {
                exs_op1 = exs_rs1_data;
                exs_op2 = exs_rs2_data;
            }
            InstType::I, InstType::S: {
                exs_op1 = exs_rs1_data;
                exs_op2 = exs_imm;
            }
            InstType::U, InstType::J: {
                exs_op1 = exs_pc;
                exs_op2 = exs_imm;
            }
            default: {
                exs_op1 = 'x;
                exs_op2 = 'x;
            }
        }
    }

    inst alum: alu (
        ctrl  : exs_ctrl      ,
        op1   : exs_op1       ,
        op2   : exs_op2       ,
        result: exs_alu_result,
    );

    let exs_muldiv_valid : logic = exs_valid && exs_ctrl.is_muldiv && !exs_data_hazard && !exs_muldiv_is_requested;
    var exs_muldiv_ready : logic;
    var exs_muldiv_rvalid: logic;
    var exs_muldiv_result: UIntX;

    inst mdu: muldivunit (
        clk                       ,
        rst                       ,
        valid  : exs_muldiv_valid ,
        ready  : exs_muldiv_ready ,
        funct3 : exs_ctrl.funct3  ,
        is_op32: exs_ctrl.is_op32 ,
        op1    : exs_op1          ,
        op2    : exs_op2          ,
        rvalid : exs_muldiv_rvalid,
        result : exs_muldiv_result,
    );

    var exs_muldiv_is_requested: logic;

    always_ff {
        if_reset {
            exs_muldiv_is_requested = 0;
        } else {
            // 次のステージに遷移
            if exq_rvalid && exq_rready {
                exs_muldiv_is_requested = 0;
            } else {
                // muldivunitにリクエストしたか判定する
                if exs_muldiv_valid && exs_muldiv_ready {
                    exs_muldiv_is_requested = 1;
                }
            }
        }
    }

    var exs_muldiv_rvalided: logic;
    let exs_muldiv_stall   : logic = exs_ctrl.is_muldiv && !exs_muldiv_rvalid && !exs_muldiv_rvalided;

    always_ff {
        if_reset {
            exs_muldiv_rvalided = 0;
        } else {
            // 次のステージに遷移
            if exq_rvalid && exq_rready {
                exs_muldiv_rvalided = 0;
            } else {
                // muldivunitの処理が完了していたら1にする
                exs_muldiv_rvalided |= exs_muldiv_rvalid;
            }
        }
    }

    var exs_brunit_take: logic;

    inst bru: brunit (
        funct3: exs_ctrl.funct3,
        op1   : exs_op1        ,
        op2   : exs_op2        ,
        take  : exs_brunit_take,
    );

    let exs_stall: logic = exs_data_hazard || exs_muldiv_stall;

    always_comb {
        // EX -> MEM
        exq_rready            = memq_wready && !exs_stall;
        memq_wvalid           = exq_rvalid && !exs_stall;
        memq_wdata.addr       = exq_rdata.addr;
        memq_wdata.bits       = exq_rdata.bits;
        memq_wdata.ctrl       = exq_rdata.ctrl;
        memq_wdata.imm        = exq_rdata.imm;
        memq_wdata.rs1_addr   = exs_rs1_addr;
        memq_wdata.rs1_data   = exs_rs1_data;
        memq_wdata.rs2_data   = exs_rs2_data;
        memq_wdata.alu_result = if exs_ctrl.is_muldiv ? exs_muldiv_result : exs_alu_result;
        memq_wdata.br_taken   = exs_ctrl.is_jump || inst_is_br(exs_ctrl) && exs_brunit_take;
        memq_wdata.jump_addr  = if inst_is_br(exs_ctrl) ? exs_pc + exs_imm : exs_alu_result & ~1;
        // exception
        let instruction_address_misaligned: logic = IALIGN == 32 && memq_wdata.br_taken && memq_wdata.jump_addr[1:0] != 2'b00;
        let memaddr                       : Addr  = if exs_ctrl.is_amo ? exs_rs1_data : exs_alu_result;
        let loadstore_address_misaligned  : logic = inst_is_memop(exs_ctrl) && case exs_ctrl.funct3[1:0] {
            2'b00  : 0, // B
            2'b01  : memaddr[0] != 1'b0, // H
            2'b10  : memaddr[1:0] != 2'b0, // W
            2'b11  : memaddr[2:0] != 3'b0, // D
            default: 0,
        };
        memq_wdata.expt = exq_rdata.expt;
        if !memq_rdata.expt.valid {
            if instruction_address_misaligned {
                memq_wdata.expt.valid = 1;
                memq_wdata.expt.cause = CsrCause::INSTRUCTION_ADDRESS_MISALIGNED;
                memq_wdata.expt.value = memq_wdata.jump_addr;
            } else if loadstore_address_misaligned {
                memq_wdata.expt.valid = 1;
                memq_wdata.expt.cause = if exs_ctrl.is_load ? CsrCause::LOAD_ADDRESS_MISALIGNED : CsrCause::STORE_AMO_ADDRESS_MISALIGNED;
                memq_wdata.expt.value = exs_alu_result;
            }
        }
    }

    ///////////////////////////////// MEM Stage /////////////////////////////////
    var mems_is_new   : logic           ;
    let mems_valid    : logic            = memq_rvalid;
    let mems_pc       : Addr             = memq_rdata.addr;
    let mems_inst_bits: Inst             = memq_rdata.bits;
    let mems_ctrl     : InstCtrl         = memq_rdata.ctrl;
    let mems_expt     : ExceptionInfo    = memq_rdata.expt;
    let mems_rd_addr  : logic        <5> = mems_inst_bits[11:7];

    assign control_hazard         = mems_valid && (csru_raise_trap || mems_ctrl.is_jump || memq_rdata.br_taken);
    assign control_hazard_pc_next = if csru_raise_trap ? csru_trap_vector : memq_rdata.jump_addr;

    always_ff {
        if_reset {
            mems_is_new = 0;
        } else {
            if memq_rvalid {
                mems_is_new = memq_rready;
            } else {
                mems_is_new = 1;
            }
        }
    }

    var memu_rdata: UIntX;
    var memu_stall: logic;
    let memu_addr : Addr  = if mems_ctrl.is_amo ? memq_rdata.rs1_data : memq_rdata.alu_result;

    // #@@range_begin(memu)
    inst memu: memunit (
        clk                                   ,
        rst                                   ,
        valid : mems_valid && !@<b>|csru_raise_trap|,
    // #@@range_end(memu)
        is_new: mems_is_new                   ,
        ctrl  : mems_ctrl                     ,
        addr  : memu_addr                     ,
        rs2   : memq_rdata.rs2_data           ,
        rdata : memu_rdata                    ,
        stall : memu_stall                    ,
        membus: d_membus                      ,
    );

    var csru_rdata      : UIntX ;
    var csru_raise_trap : logic ;
    var csru_trap_vector: Addr  ;
    var csru_trap_return: logic ;
    var minstret        : UInt64;

    inst csru: csrunit (
        clk                               ,
        rst                               ,
        valid      : mems_valid           ,
        pc         : mems_pc              ,
        inst_bits  : mems_inst_bits       ,
        ctrl       : mems_ctrl            ,
        expt_info  : mems_expt            ,
        rd_addr    : mems_rd_addr         ,
        csr_addr   : mems_inst_bits[31:20],
        rs1_addr   : memq_rdata.rs1_addr  ,
    // #@@range_begin(csru)
    rs1_data   : memq_rdata.rs1_data  ,
    @<b>|can_intr   : mems_is_new          ,|
    rdata      : csru_rdata           ,
    // #@@range_end(csru)
        raise_trap : csru_raise_trap      ,
        trap_vector: csru_trap_vector     ,
        trap_return: csru_trap_return     ,
        minstret                          ,
        led                               ,
        aclint                            ,
    );

    always_comb {
        // MEM -> WB
        memq_rready          = wbq_wready && !memu_stall;
        wbq_wvalid           = memq_rvalid && !memu_stall;
        wbq_wdata.addr       = memq_rdata.addr;
        wbq_wdata.bits       = memq_rdata.bits;
        wbq_wdata.ctrl       = memq_rdata.ctrl;
        wbq_wdata.imm        = memq_rdata.imm;
        wbq_wdata.alu_result = memq_rdata.alu_result;
        wbq_wdata.mem_rdata  = memu_rdata;
        wbq_wdata.csr_rdata  = csru_rdata;
        wbq_wdata.raise_trap = csru_raise_trap && !csru_trap_return;
    }

    ///////////////////////////////// WB Stage /////////////////////////////////
    let wbs_valid    : logic    = wbq_rvalid;
    let wbs_pc       : Addr     = wbq_rdata.addr;
    let wbs_inst_bits: Inst     = wbq_rdata.bits;
    let wbs_ctrl     : InstCtrl = wbq_rdata.ctrl;
    let wbs_imm      : UIntX    = wbq_rdata.imm;

    let wbs_rd_addr: logic<5> = wbs_inst_bits[11:7];
    let wbs_wb_data: UIntX    = if wbs_ctrl.is_lui ?
        wbs_imm
    : if wbs_ctrl.is_jump ?
        wbs_pc + (if wbs_ctrl.is_rvc ? 2 : 4)
    : if wbs_ctrl.is_load || wbs_ctrl.is_amo ?
        wbq_rdata.mem_rdata
    : if wbs_ctrl.is_csr ?
        wbq_rdata.csr_rdata
    :
        wbq_rdata.alu_result
    ;

    always_ff {
        if_reset {
            minstret = 0;
        } else {
            if wbq_rvalid && wbq_rready && !wbq_rdata.raise_trap {
                minstret += 1;
            }
        }
    }

    always_ff {
        if wbs_valid && wbs_ctrl.rwb_en && !wbq_rdata.raise_trap {
            regfile[wbs_rd_addr] = wbs_wb_data;
        }
    }

    always_comb {
        // WB -> END
        wbq_rready = 1;
    }

    ///////////////////////////////// DEBUG /////////////////////////////////
    #[ifdef(PRINT_DEBUG)]
    {
        var gen_inst_id: u64;
        var id_inst_id : u64;
        var ex_inst_id : u64;
        var mem_inst_id: u64;
        var wb_inst_id : u64;

        always_comb {
            id_inst_id = gen_inst_id;
        }

        always_ff {
            if_reset {
                gen_inst_id = 0;
                ex_inst_id  = 0;
                mem_inst_id = 0;
                wb_inst_id  = 0;
            } else {
                if i_membus.rready && i_membus.rvalid {
                    gen_inst_id = gen_inst_id + 1;
                }
                if exq_wready && exq_wvalid {
                    ex_inst_id = id_inst_id;
                }
                if memq_wready && memq_wvalid {
                    mem_inst_id = ex_inst_id;
                }
                if wbq_wready && wbq_wvalid {
                    wb_inst_id = mem_inst_id;
                }
            }
        }

        var clock_count: u64;

        always_ff {
            if_reset {
                clock_count = 1;
            } else {
                clock_count = clock_count + 1;

                $display("");
                $display("clock,%d", clock_count);
                // id
                $display("id.valid,b,%b", ids_valid);
                if ids_valid {
                    $display("id.inst_id,d,%b", id_inst_id);
                    $display("id.addr,h,%b", ids_pc);
                    $display("id.inst,h,%b", ids_inst_bits);
                    $display("id.itype,b,%b", ids_ctrl.itype);
                    $display("id.imm,h,%b", ids_imm);
                    $display("id.expt.valid,b,%b", exq_wdata.expt.valid);
                    if exq_wdata.expt.valid {
                        $display("id.expt.cause,d,%b", exq_wdata.expt.cause);
                        $display("id.expt.value,d,%b", exq_wdata.expt.value);
                    }
                }
                // ex
                $display("ex.valid,b,%b", exs_valid);
                if exs_valid {
                    $display("ex.inst_id,d,%b", ex_inst_id);
                    $display("ex.addr,h,%b", exq_rdata.addr);
                    $display("ex.inst,h,%b", exq_rdata.bits);
                    $display("ex.expt.valid,b,%b", exq_rdata.expt.valid);
                    if exq_rdata.expt.valid {
                        $display("ex.expt.cause,d,%b", exq_rdata.expt.cause);
                        $display("ex.expt.value,d,%b", exq_rdata.expt.cause);
                    }
                    $display("ex.op1,h,%b", exs_op1);
                    $display("ex.op2,h,%b", exs_op2);
                    $display("ex.alu,h,%b", exs_alu_result);
                    $display("ex.dhazard,b,%b", exs_data_hazard);
                    $display("ex.muldiv.stall,b,%b", exs_muldiv_stall);
                    if exs_ctrl.is_muldiv && exs_muldiv_rvalid {
                        $display("ex.muldiv.result,h,%b", exs_muldiv_result);
                    }
                    if inst_is_br(exs_ctrl) {
                        $display("ex.br take,b,%b", exs_brunit_take);
                    }
                }
                // mem
                $display("mem.valid,b,%b", mems_valid);
                if mems_valid {
                    $display("mem.inst_id,d,%b", mem_inst_id);
                    $display("mem.addr,h,%b", memq_rdata.addr);
                    $display("mem.inst,h,%b", memq_rdata.bits);
                    $display("mem.stall,b,%b", memu_stall);
                    if inst_is_memop(mems_ctrl) {
                        $display("mem.is_load,b,%b", mems_ctrl.is_load);
                        $display("mem.memaddr,h,%b", memu_addr);
                        if mems_ctrl.is_load {
                            if !memu_stall {
                                $display("mem.rdata,h,%b", memu_rdata);
                            }
                        } else {
                            $display("mem.wdata,h,%b", memq_rdata.rs2_data);
                        }
                    }
                    if mems_ctrl.is_csr || csru_raise_trap {
                        $display("mem.csr.rdata,h,%b", csru_rdata);
                        $display("mem.csr.trap,b,%b", csru_raise_trap);
                        $display("mem.csr.vec,h,%b", csru_trap_vector);
                    }
                    if memq_rdata.br_taken {
                        $display("mem.jump.addr,h,%b", memq_rdata.jump_addr);
                    }
                }
                // wb
                $display("wb.valid,b,%b", wbs_valid);
                if wbs_valid {
                    $display("wb.inst_id,d,%b", wb_inst_id);
                    $display("wb.addr,h,%b", wbq_rdata.addr);
                    $display("wb.inst,h,%b", wbq_rdata.bits);
                    $display("wb.trap,b,%b", wbq_rdata.raise_trap);
                    if wbs_ctrl.rwb_en && !wbq_rdata.raise_trap {
                        $display("wb.rd.wen,b,%b", wbs_ctrl.rwb_en);
                        $display("wb.rd.addr,d,%b", wbs_rd_addr);
                        $display("wb.rd.data,h,%b", wbs_wb_data);
                    }
                }
                // flush
                if control_hazard {
                    $display("flush.if,b,1");
                    $display("flush.id,b,1");
                    $display("flush.ex,b,1");
                }
            }
        }
    }

    ///////////////////////////////// FIFO /////////////////////////////////

    inst id_ex_fifo: fifo #(
        DATA_TYPE: exq_type,
        WIDTH    : 1       ,
    ) (
        clk                   ,
        rst                   ,
        flush : control_hazard,
        wready: exq_wready    ,
        wvalid: exq_wvalid    ,
        wdata : exq_wdata     ,
        rready: exq_rready    ,
        rvalid: exq_rvalid    ,
        rdata : exq_rdata     ,
    );

    inst ex_mem_fifo: fifo #(
        DATA_TYPE: memq_type,
        WIDTH    : 1        ,
    ) (
        clk                   ,
        rst                   ,
        flush : control_hazard,
        wready: memq_wready   ,
        wvalid: memq_wvalid   ,
        wdata : memq_wdata    ,
        rready: memq_rready   ,
        rvalid: memq_rvalid   ,
        rdata : memq_rdata    ,
    );

    inst mem_wb_fifo: fifo #(
        DATA_TYPE: wbq_type,
        WIDTH    : 1       ,
    ) (
        clk               ,
        rst               ,
        flush : 0         ,
        wready: wbq_wready,
        wvalid: wbq_wvalid,
        wdata : wbq_wdata ,
        rready: wbq_rready,
        rvalid: wbq_rvalid,
        rdata : wbq_rdata ,
    );
}
