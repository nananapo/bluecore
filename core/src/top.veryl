module top (
    clk: input logic,
    rst: input logic,
) {

    import conf::*;

    // memory
    var mem_valid : logic    ;
    var mem_wen   : logic    ;
    var mem_addr  : Addr     ;
    var mem_wdata : UInt64   ;
    var mem_wmask : logic <8>;
    var mem_rvalid: logic    ;
    var mem_rdata : UInt64   ;

    inst datamemory: $sv::memory (
        clk                           ,
        rst                           ,
        valid : mem_valid             ,
        wen   : mem_wen               ,
        addr  : mem_addr[16 + 3 - 1:3],
        wdata : mem_wdata             ,
        wmask : mem_wmask             ,
        rvalid: mem_rvalid            ,
        rdata : mem_rdata             ,
    );

    var ireq : meminterface::Req ;
    var iresp: meminterface::Resp;
    var dreq : meminterface::Req ;
    var dresp: meminterface::Resp;

    var last_req_is_i: logic;

    always_comb {
        ireq.ready = !dreq.valid;
        dreq.ready = 1;

        iresp.valid = last_req_is_i & mem_rvalid;
        iresp.rdata = mem_rdata;

        dresp.valid = !last_req_is_i & mem_rvalid;
        dresp.rdata = mem_rdata;

        mem_valid = ireq.valid | dreq.valid;
        if (dreq.valid) {
            mem_wen   = dreq.wen;
            mem_addr  = dreq.addr;
            mem_wdata = dreq.wdata;
            mem_wmask = dreq.wmask;
        } else {
            mem_wen   = 0;
            mem_addr  = ireq.addr;
            mem_wdata = ireq.wdata;
            mem_wmask = ireq.wmask;
        }
    }

    always_ff (clk, rst) {
        if_reset {
            last_req_is_i = 0;
        } else {
            last_req_is_i = !dreq.valid;
        }
    }

    inst c: core (
        clk    ,
        rst    ,
        ireq   ,
        iresp  ,
        dreq   ,
        dresp  ,
    );
}
