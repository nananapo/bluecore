import cpu_config::*;
import eei::*;

module top (
    clk : input  clock    ,
    rst : input  reset    ,
    gpio: output logic<32>,
) {

    // テストの状態を表すenumの定義
    enum TestState: logic<2> {
        Reset,
        Running,
        Success,
        Fail,
    }

    // テストの状態管理用のレジスタ
    var test_state: TestState;

    // 状態に応じてgpioの値を変える
    always_comb {
        gpio = case test_state {
            TestState::Reset  : 0,
            TestState::Running: 1,
            TestState::Success: 2,
            TestState::Fail   : 3,
            default           : 4,
        };
    }

    // メモリ用の信号定義
    var mem_valid : logic     ;
    var mem_ready : logic     ;
    var mem_wen   : logic     ;
    var mem_addr  : Addr      ;
    var mem_wdata : MemBusData;
    var mem_wmask : MemBusMask;
    var mem_rvalid: logic     ;
    var mem_rdata : MemBusData;

    // メモリのアドレスの幅
    local DATA_ADDR_WIDTH: u32 = 14;
    // アドレスのオフセット
    local DATA_ADDR_OFFSET: u32 = $clog2(MEMBUS_WIDTH / 8);

    local DATA_ADDR_MSB: u32 = DATA_ADDR_WIDTH + DATA_ADDR_OFFSET - 1;
    local DATA_ADDR_LSB: u32 = DATA_ADDR_OFFSET;

    // メモリのインスタンス化
    inst datamemory: memory #(
        DATA_WIDTH: MEMBUS_WIDTH       ,
        ADDR_WIDTH: DATA_ADDR_WIDTH    ,
        FILE_PATH : MEMORY_INITIAL_FILE,
    ) (
        clk                                          ,
        rst                                          ,
        ready : mem_ready                            ,
        valid : mem_valid                            ,
        wen   : mem_wen                              ,
        addr  : mem_addr[DATA_ADDR_MSB:DATA_ADDR_LSB],
        wdata : mem_wdata                            ,
        wmask : mem_wmask                            ,
        rvalid: mem_rvalid                           ,
        rdata : mem_rdata                            ,
    );

    // メモリとcoreのinterface
    inst ibus_if: membus_if;
    inst dbus_if: membus_if;

    // 命令フェッチとload/store命令の調停
    var memarb_last_is_i: logic;
    always_ff {
        if_reset {
            memarb_last_is_i = 0;
        } else {
            if mem_ready {
                // load/storeを優先する
                memarb_last_is_i = !dbus_if.valid;
            }
        }
    }

    // メモリとinterfaceの接続
    always_comb {
        // load/storeを優先する
        ibus_if.ready      = mem_ready & !dbus_if.valid;
        ibus_if.resp_valid = memarb_last_is_i & mem_rvalid;
        ibus_if.resp_rdata = mem_rdata;

        dbus_if.ready      = mem_ready;
        dbus_if.resp_valid = !memarb_last_is_i & mem_rvalid;
        dbus_if.resp_rdata = mem_rdata;

        mem_valid = ibus_if.valid | dbus_if.valid;
        if dbus_if.valid {
            mem_wen   = dbus_if.wen;
            mem_addr  = dbus_if.addr;
            mem_wdata = dbus_if.wdata;
            mem_wmask = dbus_if.wmask;
        } else {
            mem_wen   = 0;
            mem_addr  = ibus_if.addr;
            mem_wdata = ibus_if.wdata;
            mem_wmask = ibus_if.wmask;
        }
    }

    if ENV_TEST :test_check {
        always_ff {
            if_reset {
                test_state = TestState::Reset;
            } else {
                // テストの結果を書き込むアドレスへの書き込みを検知
                if dbus_if.valid & dbus_if.wen & dbus_if.addr == TEST_EXIT_ADDR {
                    $display("wdata: %h", dbus_if.wdata);
                    // 成功したかどうかを出力する
                    if dbus_if.wdata == TEST_WDATA_SUCCESS {
                        $display  ("test: Success");
                        test_state = TestState::Success;
                    } else {
                        $error    ("test: Fail");
                        test_state = TestState::Fail;
                    }
                    // テスト終了
                    $finish();
                } else {
                    if test_state == TestState::Reset {
                        test_state = TestState::Running;
                    }
                }
            }
        }
    }

    // coreのインスタンス化
    inst c: core (
        clk      ,
        rst      ,
        ibus_if  ,
        dbus_if  ,
    );
}
