module top (
    clk: input logic,
    rst: input logic,
) {

    import conf::*;

    // memory
    var mem_valid : logic ;
    var mem_wen   : logic ;
    var mem_addr  : Addr  ;
    var mem_wdata : UInt64;
    var mem_rvalid: logic ;
    var mem_rdata : UInt64;

    inst mem: $sv::memory (
        clk                           ,
        rst                           ,
        valid : mem_valid             ,
        wen   : mem_wen               ,
        addr  : mem_addr[16 + 3 - 1:3],
        wdata : mem_wdata             ,
        rvalid: mem_rvalid            ,
        rdata : mem_rdata             ,
    );

    var ireq : meminterface::Req ;
    var iresp: meminterface::Resp;

    always_comb {
        ireq.ready  = 1;
        iresp.valid = mem_rvalid;
        iresp.rdata = mem_rdata;

        mem_valid = ireq.valid;
        mem_wen   = ireq.wen;
        mem_addr  = ireq.addr;
        mem_wdata = ireq.wdata;
    }

    inst c: core (
        clk    ,
        rst    ,
        ireq   ,
        iresp  ,
    );
}
