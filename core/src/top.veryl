import eei::*;

// #@@range_begin(port)
module top #(
    param RAM_FILEPATH_IS_ENV: bit    = 1              ,
    param RAM_FILEPATH       : string = "RAM_FILE_PATH",
) (
// #@@range_end(port)
    clk          : input clock,
    rst          : input reset,
    MMAP_DBG_ADDR: input Addr ,
    #[ifdef(TEST_MODE)]
    test_success: output bit  ,
    led         : output UIntX,
) {

    // #@@range_begin(addr_to_memaddr)
    // アドレスをデータ単位でのアドレスに変換する
    function addr_to_memaddr@<b>|::<DATA_WIDTH: u32, ADDR_WIDTH: u32>| (
        addr: input logic<XLEN>,
    ) -> logic<@<b>|ADDR_WIDTH|> {
        return addr[$clog2(@<b>|DATA_WIDTH| / 8)+:@<b>|ADDR_WIDTH|];
    }
    // #@@range_end(addr_to_memaddr)

    // #@@range_begin(membus)
    inst membus  : membus_if::<@<b>|RAM|_DATA_WIDTH, @<b>|RAM|_ADDR_WIDTH>;
    inst i_membus: membus_if::<ILEN, XLEN>; // 命令フェッチ用
    inst d_membus: @<b>|Membus|; // ロードストア命令用
    // #@@range_end(membus)

    var memarb_last_i    : logic;
    var memarb_last_iaddr: Addr ;

    // riscv-testsの終了を検知する
    #[ifdef(TEST_MODE)]
    always_ff {
        let RISCVTESTS_TOHOST_ADDR: Addr = 'h1000 as Addr;
        if d_membus.valid && d_membus.ready && d_membus.wen == 1 && d_membus.addr == RISCVTESTS_TOHOST_ADDR && d_membus.wdata[lsb] == 1'b1 {
            test_success = d_membus.wdata == 1;
            if d_membus.wdata == 1 {
                $display("riscv-tests success!");
            } else {
                $display("riscv-tests failed!");
                $error  ("wdata : %h", d_membus.wdata);
            }
            $finish();
        }
    }

    // メモリアクセスを調停する
    always_ff {
        if_reset {
            memarb_last_i     = 0;
            memarb_last_iaddr = 0;
        } else {
            if membus.ready {
                memarb_last_i     = !d_membus.valid;
                memarb_last_iaddr = i_membus.addr;
            }
        }
    }

    always_comb {
        i_membus.ready  = membus.ready && !d_membus.valid;
        i_membus.rvalid = membus.rvalid && memarb_last_i;
        i_membus.rdata  = if memarb_last_iaddr[2] == 0 ? membus.rdata[31:0] : membus.rdata[63:32];

        d_membus.ready  = membus.ready;
        d_membus.rvalid = membus.rvalid && !memarb_last_i;
        d_membus.rdata  = membus.rdata;

        // #@@range_begin(arb)
        membus.valid = i_membus.valid | d_membus.valid;
        if d_membus.valid {
            membus.addr  = addr_to_memaddr@<b>|::<RAM_DATA_WIDTH, RAM_ADDR_WIDTH>|(d_membus.addr);
            membus.wen   = d_membus.wen;
            membus.wdata = d_membus.wdata;
            membus.wmask = d_membus.wmask;
        } else {
            membus.addr  = addr_to_memaddr@<b>|::<RAM_DATA_WIDTH, RAM_ADDR_WIDTH>|(i_membus.addr);
            membus.wen   = 0; // 命令フェッチは常に読み込み
            membus.wdata = 'x;
            membus.wmask = 'x;
        }
        // #@@range_end(arb)
    }

    // #@@range_begin(inst)
    inst ram: memory::<@<b>|RAM|_DATA_WIDTH, @<b>|RAM|_ADDR_WIDTH> #(
        FILEPATH_IS_ENV: @<b>|RAM|_FILEPATH_IS_ENV,
        FILEPATH       : @<b>|RAM|_FILEPATH       ,
    ) (
    // #@@range_end(inst)
        clk     ,
        rst     ,
        membus  ,
    );

    inst c: core (
        clk       ,
        rst       ,
        i_membus  ,
        d_membus  ,
        led       ,
    );
}
