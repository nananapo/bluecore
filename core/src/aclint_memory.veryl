import eei::*;

module aclint_memory (
    clk   : input   clock            ,
    rst   : input   reset            ,
    membus: modport Membus::slave    ,
    aclint: modport aclint_if::master,
) {
    var msip0    : logic ;
    var mtime    : UInt64;
    var mtimecmp0: UInt64;

    always_comb {
        aclint.msip = msip0;
        aclint.mtip = mtime >= mtimecmp0;
    }

    assign membus.ready = 1;
    always_ff {
        if_reset {
            membus.rvalid = 0;
            membus.rdata  = 0;
            msip0         = 0;
            mtime         = 0;
            mtimecmp0     = 0;
        } else {
            // count up mtime
            mtime += 1;

            membus.rvalid = membus.valid;
            if membus.valid {
                let addr: Addr = {membus.addr[XLEN - 1:3], 3'b0};
                if membus.wen {
                    let M: logic<MEMBUS_DATA_WIDTH> = membus.wmask_expand();
                    let D: logic<MEMBUS_DATA_WIDTH> = membus.wdata & M;
                    case addr {
                        MMAP_ACLINT_MSIP    : msip0     = D[0] | msip0 & ~M[0];
                        MMAP_ACLINT_MTIME   : mtime     = D | mtime & ~M;
                        MMAP_ACLINT_MTIMECMP: mtimecmp0 = D | mtimecmp0 & ~M;
                        default             : {}
                    }
                } else {
                    membus.rdata = case addr {
                        MMAP_ACLINT_MSIP    : {63'b0, msip0},
                        MMAP_ACLINT_MTIME   : mtime,
                        MMAP_ACLINT_MTIMECMP: mtimecmp0,
                        default             : 0,
                    };
                }
            }
        }
    }
}
