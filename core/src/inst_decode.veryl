import eei::*;
import corectrl::*;

module inst_decode (
    bits: input  Inst    ,
    ctrl: output InstCtrl,
    imm : output UIntX   ,
) {
    // opcodes
    local OP_OP_IMM  : logic<7> = 7'b0010011;
    local OP_LUI     : logic<7> = 7'b0110111;
    local OP_AUIPC   : logic<7> = 7'b0010111;
    local OP_OP      : logic<7> = 7'b0110011;
    local OP_JAL     : logic<7> = 7'b1101111;
    local OP_JALR    : logic<7> = 7'b1100111;
    local OP_BRANCH  : logic<7> = 7'b1100011;
    local OP_LOAD    : logic<7> = 7'b0000011;
    local OP_STORE   : logic<7> = 7'b0100011;
    local OP_MISC_MEM: logic<7> = 7'b0001111;
    local OP_SYSTEM  : logic<7> = 7'b1110011;

    local T: logic = 1'b1;
    local F: logic = 1'b0;

    let op: logic<7> = bits[6:0];
    let f7: logic<7> = bits[31:25];
    let f3: logic<3> = bits[14:12];

    // immediate values
    let imm_i_g: logic<12> = bits[31:20];
    let imm_s_g: logic<12> = {bits[31:25], bits[11:7]};
    let imm_b_g: logic<12> = {bits[31], bits[7], bits[30:25], bits[11:8]};
    let imm_j_g: logic<20> = {bits[31], bits[19:12], bits[20], bits[30:21]};
    let imm_u_g: logic<20> = bits[31:12];
    let imm_z_g: logic<17> = bits[31:15]; // {csr , uimm}

    let imm_i: UIntX = {imm_i_g[msb] repeat XLEN - $bits(imm_i_g), imm_i_g};
    let imm_s: UIntX = {imm_s_g[msb] repeat XLEN - $bits(imm_s_g), imm_s_g};
    let imm_b: UIntX = {imm_b_g[msb] repeat XLEN - $bits(imm_b_g) - 1, imm_b_g, 1'b0};
    let imm_j: UIntX = {imm_j_g[msb] repeat XLEN - $bits(imm_j_g) - 1, imm_j_g, 1'b0};
    let imm_u: UIntX = {imm_u_g[msb] repeat XLEN - $bits(imm_u_g) - 12, imm_u_g, 12'b0};
    let imm_z: UIntX = {1'b0 repeat XLEN - $bits(imm_z_g), imm_z_g};

    always_comb {
        case op {
            OP_LUI: {
                        imm  = imm_u;
                        ctrl = {T, InstType::U, T, T, F, F, F, F, F, f3, f7};
                    }
            OP_AUIPC: {
                          imm  = imm_u;
                          ctrl = {T, InstType::U, T, F, F, F, F, F, F, f3, f7};
                      }
            OP_JAL: {
                        imm  = imm_j;
                        ctrl = {T, InstType::J, T, F, F, T, F, F, F, f3, f7};
                    }
            OP_JALR: {
                         imm  = imm_i;
                         ctrl = {T, InstType::I, T, F, F, T, F, F, F, f3, f7};
                     }
            OP_BRANCH: {
                           imm  = imm_b;
                           ctrl = {f3 != 3'b010 & f3 != 3'b011, InstType::B, F, F, F, F, F, F, F, f3, f7};
                       }
            OP_LOAD: {
                         imm  = imm_i;
                         ctrl = {f3 != 3'b011 & f3 != 3'b110 | f3 != 3'b111, InstType::I, T, F, F, F, T, F, F, f3, f7};
                     }
            OP_STORE: {
                          imm  = imm_s;
                          ctrl = {f3 == 3'b000 | f3 == 3'b001 | f3 == 3'b010, InstType::S, F, F, F, F, F, F, F, f3, f7};
                      }
            OP_OP: {
                       imm  = 'x;
                       ctrl = {f7 == 0 | f7 == 7'b0100000 & (f3 == 3'b001 || f3 == 3'b101), InstType::R, T, F, T, F, F, F, F, f3, f7};
                   }
            OP_OP_IMM: {
                           imm  = imm_i;
                           ctrl = {case f3 {
                               3'b001 : f7 == 0,
                               3'b101 : f7 == 0 | f7 == 7'b0100000,
                               default: 1'b1,
                           }, InstType::I, T, F, T, F, F, F, F, f3, f7};
                       }
            OP_MISC_MEM: {
                             imm  = imm_i;
                             ctrl = {f3 == 3'b000, InstType::I, F, F, F, F, F, F, T, f3, f7};
                         }
            OP_SYSTEM: {
                           imm  = imm_z;
                           ctrl = {T, InstType::I, T, F, F, F, F, T, F, f3, f7};
                       }
            default: {
                         imm  = 'x;
                         ctrl = {F, InstType::X, F, F, F, F, F, F, F, f3, f7};
                     }
        }
    }
}
