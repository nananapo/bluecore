package eei {
    const XLEN  : u32 = 64;
    const ILEN  : u32 = 32;
    const IALIGN: u32 = 16;

    type UIntX  = logic       <XLEN>;
    type UInt32 = logic       <32>  ;
    type UInt64 = logic       <64>  ;
    type SIntX  = signed logic<XLEN>;
    type SInt32 = signed logic<32>  ;
    type SInt64 = signed logic<64>  ;
    type Inst   = logic       <ILEN>;
    type Addr   = logic       <XLEN>;

    // Machine Implementation ID
    const MACHINE_IMPLEMENTATION_ID: UIntX = 1;

    // mstatus
    const MSTATUS_UXL: UInt64 = 2 << 32;
    const MSTATUS_SXL: UInt64 = 2 << 34;

    // メモリバスのデータ幅
    const MEMBUS_DATA_WIDTH: u32 = 64;

    // RAM
    const RAM_ADDR_WIDTH: u32  = 16;
    const RAM_DATA_WIDTH: u32  = 64;
    const MMAP_RAM_BEGIN: Addr = 'h8000_0000 as Addr;

    // ROM
    const ROM_ADDR_WIDTH: u32  = 9;
    const ROM_DATA_WIDTH: u32  = 64;
    const MMAP_ROM_BEGIN: Addr = 'h1000 as Addr;
    const MMAP_ROM_END  : Addr = MMAP_ROM_BEGIN + 'h3ff as Addr;

    // ACLINT
    const MMAP_ACLINT_BEGIN   : Addr = 'h200_0000 as Addr;
    const MMAP_ACLINT_MSIP    : Addr = 0;
    const MMAP_ACLINT_MTIMECMP: Addr = 'h4000 as Addr;
    const MMAP_ACLINT_MTIME   : Addr = 'h7ff8 as Addr;
    const MMAP_ACLINT_SETSSIP : Addr = 'h8000 as Addr;
    const MMAP_ACLINT_END     : Addr = MMAP_ACLINT_BEGIN + 'hbfff as Addr;

    // pc on reset
    const INITIAL_PC: Addr = MMAP_ROM_BEGIN;

    struct MemException {
        valid      : logic   ,
        page_fault : logic   ,
        addr_offset: logic<3>,
    }

    // opcode
    const OP_LUI      : logic<7> = 7'b0110111;
    const OP_AUIPC    : logic<7> = 7'b0010111;
    const OP_OP       : logic<7> = 7'b0110011;
    const OP_OP_IMM   : logic<7> = 7'b0010011;
    const OP_OP_32    : logic<7> = 7'b0111011;
    const OP_OP_IMM_32: logic<7> = 7'b0011011;
    const OP_JAL      : logic<7> = 7'b1101111;
    const OP_JALR     : logic<7> = 7'b1100111;
    const OP_BRANCH   : logic<7> = 7'b1100011;
    const OP_LOAD     : logic<7> = 7'b0000011;
    const OP_STORE    : logic<7> = 7'b0100011;
    const OP_SYSTEM   : logic<7> = 7'b1110011;
    const OP_MISC_MEM : logic<7> = 7'b0001111;
    const OP_AMO      : logic<7> = 7'b0101111;

    enum AMOOp: logic<5> {
        LR = 5'b00010,
        SC = 5'b00011,
        SWAP = 5'b00001,
        ADD = 5'b00000,
        XOR = 5'b00100,
        AND = 5'b01100,
        OR = 5'b01000,
        MIN = 5'b10000,
        MAX = 5'b10100,
        MINU = 5'b11000,
        MAXU = 5'b11100,
    }

    enum PrivMode: logic<2> {
        M = 2'b11,
        S = 2'b01,
        U = 2'b00,
    }

    // CSRのアドレス
    enum CsrAddr: logic<12> {
        // Supervisor Trap Setup
        SSTATUS = 12'h100,
        SIE = 12'h104,
        STVEC = 12'h105,
        SCOUNTEREN = 12'h106,
        // Supervisor Trap Handling
        SSCRATCH = 12'h140,
        SEPC = 12'h141,
        SCAUSE = 12'h142,
        STVAL = 12'h143,
        SIP = 12'h144,
        // Supervisor Protection and Translation
        SATP = 12'h180,
        // Machine Information Registers
        MIMPID = 12'hf13,
        MHARTID = 12'hf14,
        // Machine Trap Setup
        MSTATUS = 12'h300,
        MISA = 12'h301,
        MEDELEG = 12'h302,
        MIDELEG = 12'h303,
        MIE = 12'h304,
        MTVEC = 12'h305,
        MCOUNTEREN = 12'h306,
        // Machine Trap Handling
        MSCRATCH = 12'h340,
        MEPC = 12'h341,
        MCAUSE = 12'h342,
        MTVAL = 12'h343,
        MIP = 12'h344,
        // Machine Counter/Timers
        MCYCLE = 12'hB00,
        MINSTRET = 12'hB02,
        // Custom
        LED = 12'h800,
        // Unprivileged Counter/Timers
        CYCLE = 12'hC00,
        TIME = 12'hC01,
        INSTRET = 12'hC02,
    }

    enum CsrCause: UIntX {
        INSTRUCTION_ADDRESS_MISALIGNED = 0,
        ILLEGAL_INSTRUCTION = 2,
        BREAKPOINT = 3,
        LOAD_ADDRESS_MISALIGNED = 4,
        STORE_AMO_ADDRESS_MISALIGNED = 6,
        ENVIRONMENT_CALL_FROM_U_MODE = 8,
        ENVIRONMENT_CALL_FROM_M_MODE = 11,
        INSTRUCTION_PAGE_FAULT = 12,
        LOAD_PAGE_FAULT = 13,
        STORE_AMO_PAGE_FAULT = 15,
        SUPERVISOR_SOFTWARE_INTERRUPT = 'h8000_0000_0000_0001,
        MACHINE_SOFTWARE_INTERRUPT = 'h8000_0000_0000_0003,
        SUPERVISOR_TIMER_INTERRUPT = 'h8000_0000_0000_0005,
        MACHINE_TIMER_INTERRUPT = 'h8000_0000_0000_0007,
        SUPERVISOR_EXTERNAL_INTERRUPT = 'h8000_0000_0000_0009,
        MACHINE_EXTERNAL_INTERRUPT = 'h8000_0000_0000_000b,
    }
}
