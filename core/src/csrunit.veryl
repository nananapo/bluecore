import eei::*;
import corectrl::*;

module csrunit (
    clk        : input   clock               ,
    rst        : input   reset               ,
    valid      : input   logic               ,
    pc         : input   Addr                ,
    inst_bits  : input   Inst                ,
    ctrl       : input   InstCtrl            ,
    expt_info  : input   ExceptionInfo       ,
    rd_addr    : input   logic           <5> ,
    csr_addr   : input   logic           <12>,
    rs1_addr   : input   logic           <5> ,
    rs1_data   : input   UIntX               ,
    can_intr   : input   logic               ,
    rdata      : output  UIntX               ,
    mode       : output  PrivMode            ,
    raise_trap : output  logic               ,
    trap_vector: output  Addr                ,
    trap_return: output  logic               ,
    minstret   : input   UInt64              ,
    led        : output  UIntX               ,
    aclint     : modport aclint_if::slave    ,
) {

    // wmasks
    const MSTATUS_WMASK   : UIntX = 'h0000_0000_0020_1888 as UIntX;
    const MTVEC_WMASK     : UIntX = 'hffff_ffff_ffff_fffd;
    const MCOUNTEREN_WMASK: UIntX = 'h0000_0000_0000_0007 as UIntX;
    const MSCRATCH_WMASK  : UIntX = 'hffff_ffff_ffff_ffff;
    const MEPC_WMASK      : UIntX = 'hffff_ffff_ffff_fffe;
    const MCAUSE_WMASK    : UIntX = 'hffff_ffff_ffff_ffff;
    const MTVAL_WMASK     : UIntX = 'hffff_ffff_ffff_ffff;
    const MIE_WMASK       : UIntX = 'h0000_0000_0000_0088 as UIntX;
    const SSTATUS_WMASK   : UIntX = 'h0000_0000_0000_0000 as UIntX;
    const SCOUNTEREN_WMASK: UIntX = 'h0000_0000_0000_0007 as UIntX;
    const STVEC_WMASK     : UIntX = 'hffff_ffff_ffff_fffd;
    const SSCRATCH_WMASK  : UIntX = 'hffff_ffff_ffff_ffff;
    const SEPC_WMASK      : UIntX = 'hffff_ffff_ffff_fffe;
    const SCAUSE_WMASK    : UIntX = 'hffff_ffff_ffff_ffff;
    const STVAL_WMASK     : UIntX = 'hffff_ffff_ffff_ffff;
    const LED_WMASK       : UIntX = 'hffff_ffff_ffff_ffff;

    // read masks
    const SSTATUS_RMASK: UIntX = 'h8000_0003_018f_e762;

    // CSRR(W|S|C)[I]命令かどうか
    let is_wsc: logic = ctrl.is_csr && ctrl.funct3[1:0] != 0;
    // MRET命令かどうか
    let is_mret: logic = inst_bits == 32'h30200073;
    // WFI命令かどうか
    let is_wfi: logic = inst_bits == 32'h10500073;

    // Check CSR access
    let will_not_write_csr     : logic = (ctrl.funct3[1:0] == 2 || ctrl.funct3[1:0] == 3) && rs1_addr == 0; // set/clear with source = 0
    let expt_write_readonly_csr: logic = is_wsc && !will_not_write_csr && csr_addr[11:10] == 2'b11; // attempt to write read-only CSR
    let expt_csr_priv_violation: logic = is_wsc && csr_addr[9:8] >: mode; // attempt to access CSR without privilege level
    let expt_zicntr_priv       : logic = is_wsc && (mode <= PrivMode::S && case csr_addr {
        CsrAddr::CYCLE  : !mcounteren[0],
        CsrAddr::TIME   : !mcounteren[1],
        CsrAddr::INSTRET: !mcounteren[2],
        default         : 0,
    } || mode <= PrivMode::U && case csr_addr {
        CsrAddr::CYCLE  : !scounteren[0],
        CsrAddr::TIME   : !scounteren[1],
        CsrAddr::INSTRET: !scounteren[2],
        default         : 0,
    }); // attempt to access Zicntr CSR without permission
    let expt_trap_return_priv: logic = is_mret && mode <: PrivMode::M; // attempt to execute trap return instruction in low privilege level

    // CSR
    let misa      : UIntX  = {2'd2, 1'b0 repeat XLEN - 28, 26'b00000101000001000100000101}; // U, S, M, I, C, A
    let mhartid   : UIntX  = 0;
    var mstatus   : UIntX ;
    var mtvec     : UIntX ;
    var mcounteren: UInt32;
    var mie       : UIntX ;
    var mcycle    : UInt64;
    var mscratch  : UIntX ;
    var mepc      : UIntX ;
    var mcause    : UIntX ;
    var mtval     : UIntX ;

    let mip: UIntX = {
        1'b0 repeat XLEN - 12, // 0, LCOFIP
        1'b0, // MEIP
        1'b0, // 0
        1'b0, // SEIP
        1'b0, // 0
        aclint.mtip, // MTIP
        1'b0, // 0
        1'b0, // STIP
        1'b0, // 0
        aclint.msip, // MSIP
        1'b0, // 0
        1'b0, // SSIP
        1'b0, // 0
    };

    // mstatus bits
    let mstatus_mpp : PrivMode = mstatus[12:11] as PrivMode;
    let mstatus_mpie: logic    = mstatus[7];
    let mstatus_mie : logic    = mstatus[3];

    // Supervisor mode CSR
    let sstatus   : UIntX  = mstatus & SSTATUS_RMASK;
    var scounteren: UInt32;
    var stvec     : UIntX ;
    var sscratch  : UIntX ;
    var sepc      : UIntX ;
    var scause    : UIntX ;
    var stval     : UIntX ;

    // Interrupt
    let interrupt_pending: UIntX = mip & mie;
    let raise_interrupt  : logic = valid && can_intr && (mode != PrivMode::M || mstatus_mie) && interrupt_pending != 0;
    let interrupt_cause  : UIntX = switch {
        interrupt_pending[3]: CsrCause::MACHINE_SOFTWARE_INTERRUPT,
        interrupt_pending[7]: CsrCause::MACHINE_TIMER_INTERRUPT,
        default             : 0,
    };
    let interrupt_vector: Addr = if mtvec[0] == 0 ? {mtvec[msb:2], 2'b0} : // Direct
     {mtvec[msb:2] + interrupt_cause[msb - 2:0], 2'b0}; // Vectored
    let interrupt_mode: PrivMode = PrivMode::M;

    // Exception
    let raise_expt: logic = valid && (expt_info.valid || expt_write_readonly_csr || expt_csr_priv_violation || expt_zicntr_priv || expt_trap_return_priv);
    let expt_cause: UIntX = switch {
        expt_info.valid        : expt_info.cause,
        expt_write_readonly_csr: CsrCause::ILLEGAL_INSTRUCTION,
        expt_csr_priv_violation: CsrCause::ILLEGAL_INSTRUCTION,
        expt_zicntr_priv       : CsrCause::ILLEGAL_INSTRUCTION,
        expt_trap_return_priv  : CsrCause::ILLEGAL_INSTRUCTION,
        default                : 0,
    };
    let expt_value: UIntX = switch {
        expt_info.valid                            : expt_info.value,
        expt_cause == CsrCause::ILLEGAL_INSTRUCTION: {1'b0 repeat XLEN - $bits(Inst), inst_bits},
        default                                    : 0
    };
    let expt_vector: Addr     = {mtvec[msb:2], 2'b0};
    let expt_mode  : PrivMode = PrivMode::M;

    // Trap Return
    assign trap_return      = valid && is_mret && !raise_expt && !raise_interrupt;
    let trap_return_mode: PrivMode = mstatus_mpp;

    // Trap
    assign raise_trap = raise_expt || raise_interrupt || trap_return;
    let trap_cause: UIntX = switch {
        raise_expt     : expt_cause,
        raise_interrupt: interrupt_cause,
        default        : 0,
    };
    assign trap_vector = switch {
        raise_expt     : expt_vector,
        raise_interrupt: interrupt_vector,
        trap_return    : mepc,
        default        : 0,
    };
    let trap_mode_next: PrivMode = switch {
        raise_expt     : expt_mode,
        raise_interrupt: interrupt_mode,
        trap_return    : trap_return_mode,
        default        : PrivMode::U,
    };

    var wmask: UIntX; // write mask
    var wdata: UIntX; // write data

    always_comb {
        // read
        rdata = case csr_addr {
            CsrAddr::MISA      : misa,
            CsrAddr::MIMPID    : MACHINE_IMPLEMENTATION_ID,
            CsrAddr::MHARTID   : mhartid,
            CsrAddr::MSTATUS   : mstatus,
            CsrAddr::MTVEC     : mtvec,
            CsrAddr::MIP       : mip,
            CsrAddr::MIE       : mie,
            CsrAddr::MCOUNTEREN: {1'b0 repeat XLEN - 32, mcounteren},
            CsrAddr::MCYCLE    : mcycle,
            CsrAddr::MINSTRET  : minstret,
            CsrAddr::MSCRATCH  : mscratch,
            CsrAddr::MEPC      : mepc,
            CsrAddr::MCAUSE    : mcause,
            CsrAddr::MTVAL     : mtval,
            CsrAddr::SSTATUS   : sstatus,
            CsrAddr::SCOUNTEREN: {1'b0 repeat XLEN - 32, scounteren},
            CsrAddr::STVEC     : stvec,
            CsrAddr::SSCRATCH  : sscratch,
            CsrAddr::SEPC      : sepc,
            CsrAddr::SCAUSE    : scause,
            CsrAddr::STVAL     : stval,
            CsrAddr::LED       : led,
            CsrAddr::CYCLE     : mcycle,
            CsrAddr::TIME      : aclint.mtime,
            CsrAddr::INSTRET   : minstret,
            default            : 'x,
        };
        // write
        wmask = case csr_addr {
            CsrAddr::MSTATUS   : MSTATUS_WMASK,
            CsrAddr::MTVEC     : MTVEC_WMASK,
            CsrAddr::MIE       : MIE_WMASK,
            CsrAddr::MCOUNTEREN: MCOUNTEREN_WMASK,
            CsrAddr::MSCRATCH  : MSCRATCH_WMASK,
            CsrAddr::MEPC      : MEPC_WMASK,
            CsrAddr::MCAUSE    : MCAUSE_WMASK,
            CsrAddr::MTVAL     : MTVAL_WMASK,
            CsrAddr::SSTATUS   : SSTATUS_WMASK,
            CsrAddr::SCOUNTEREN: SCOUNTEREN_WMASK,
            CsrAddr::STVEC     : STVEC_WMASK,
            CsrAddr::SSCRATCH  : SSCRATCH_WMASK,
            CsrAddr::SEPC      : SEPC_WMASK,
            CsrAddr::SCAUSE    : SCAUSE_WMASK,
            CsrAddr::STVAL     : STVAL_WMASK,
            CsrAddr::LED       : LED_WMASK,
            default            : 0,
        };
        let wsource: UIntX = if ctrl.funct3[2] ? {1'b0 repeat XLEN - 5, rs1_addr} : rs1_data;
        wdata   = case ctrl.funct3[1:0] {
            2'b01  : wsource,
            2'b10  : rdata | wsource,
            2'b11  : rdata & ~wsource,
            default: 'x,
        } & wmask | (rdata & ~wmask);
    }

    always_ff {
        if_reset {
            mode       = PrivMode::M;
            mstatus    = MSTATUS_SXL | MSTATUS_UXL;
            mtvec      = 0;
            mie        = 0;
            mcounteren = 0;
            mscratch   = 0;
            mcycle     = 0;
            mepc       = 0;
            mcause     = 0;
            mtval      = 0;
            scounteren = 0;
            stvec      = 0;
            sscratch   = 0;
            sepc       = 0;
            scause     = 0;
            stval      = 0;
            led        = 0;
        } else {
            mcycle += 1;
            if valid {
                if raise_trap {
                    if raise_expt || raise_interrupt {
                        mepc = if raise_expt ? pc : // exception
                         if raise_interrupt && is_wfi ? pc + 4 : pc; // interrupt when wfi / interrupt
                        mcause = trap_cause;
                        if raise_expt {
                            mtval = expt_value;
                        }
                        // save mstatus.mie to mstatus.mpie
                        // and set mstatus.mie = 0
                        mstatus[7] = mstatus[3];
                        mstatus[3] = 0;
                        // save current privilege level to mstatus.mpp
                        mstatus[12:11] = mode;
                    } else if trap_return {
                        // set mstatus.mie = mstatus.mpie
                        //     mstatus.mpie = 0
                        mstatus[3] = mstatus[7];
                        mstatus[7] = 0;
                        // set mstatus.mpp = U (least privilege level)
                        mstatus[12:11] = PrivMode::U;
                    }
                    mode = trap_mode_next;
                } else {
                    if is_wsc {
                        case csr_addr {
                            CsrAddr::MSTATUS   : mstatus    = validate_mstatus(mstatus, wdata);
                            CsrAddr::MTVEC     : mtvec      = wdata;
                            CsrAddr::MIE       : mie        = wdata;
                            CsrAddr::MCOUNTEREN: mcounteren = wdata[31:0];
                            CsrAddr::MSCRATCH  : mscratch   = wdata;
                            CsrAddr::MEPC      : mepc       = wdata;
                            CsrAddr::MCAUSE    : mcause     = wdata;
                            CsrAddr::MTVAL     : mtval      = wdata;
                            CsrAddr::SSTATUS   : mstatus    = validate_mstatus(mstatus, wdata | mstatus & ~SSTATUS_WMASK);
                            CsrAddr::SCOUNTEREN: scounteren = wdata[31:0];
                            CsrAddr::STVEC     : stvec      = wdata;
                            CsrAddr::SSCRATCH  : sscratch   = wdata;
                            CsrAddr::SEPC      : sepc       = wdata;
                            CsrAddr::SCAUSE    : scause     = wdata;
                            CsrAddr::STVAL     : stval      = wdata;
                            CsrAddr::LED       : led        = wdata;
                            default            : {}
                        }
                    }
                }
            }
        }
    }

    function validate_mstatus (
        mstatus: input UIntX,
        wdata  : input UIntX,
    ) -> UIntX {
        var result: UIntX;
        result = wdata;
        // MPP
        if wdata[12:11] == 2'b10 {
            result[12:11] = mstatus[12:11];
        }
        return result;
    }
}
