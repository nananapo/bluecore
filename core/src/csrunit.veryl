import csr::*;
import eei::*;
import corectrl::*;

module csrunit (
    clk        : input  logic       ,
    rst        : input  logic       ,
    valid      : input  logic       ,
    rdata      : output UIntX       ,
    raise_trap : output logic       ,
    trap_vector: output Addr        ,
    pc         : input  Addr        ,
    ctrl       : input  InstCtrl    ,
    rd_addr    : input  logic   <5> ,
    csr_addr   : input  logic   <12>,
    rs1        : input  UIntX       ,
) {
    // 現在のモード
    var mode: CsrMode;

    // レジスタ
    var mtvec : UIntX;
    var mepc  : UIntX;
    var mcause: UIntX;

    let cmd_is_write: logic = ctrl.is_system & ctrl.funct3[1:0] != 0; // W or S or C
    let cmd_is_ecall: logic = ctrl.is_system & csr_addr == 0 & rs1[4:0] == 0 & ctrl.funct3 == 0 & rd_addr == 0;
    let cmd_is_mret : logic = ctrl.is_system & csr_addr == 12'b0011000_00010 & rs1[4:0] == 0 & ctrl.funct3 == 0 & rd_addr == 0;

    // ECALLのとき、例外を発生させる
    let raise_expt: logic = cmd_is_ecall;
    let cause_expt: UIntX = if cmd_is_ecall {
        CsrCause::ENVIRONMENT_CALL_FROM_U_MODE + {1'b0 repeat XLEN - $bits(mode), mode}
    } else {
        0
    };

    // レジスタに書き込む用のデータ
    var wdata: UIntX;

    always_comb {
        raise_trap  = valid & (raise_expt | cmd_is_mret);
        trap_vector = if (raise_expt) {
            mtvec
        } else {
            mepc
        };

        case csr_addr {
            CsrAddr::MTVEC : rdata = mtvec;
            CsrAddr::MEPC  : rdata = mepc;
            CsrAddr::MCAUSE: rdata = mcause;
            default        : rdata = 'x;
        }
        case ctrl.funct3[1:0] {
            2'b01  : wdata = rs1;
            2'b10  : wdata = rdata | rs1;
            2'b11  : wdata = rdata & ~rs1;
            default: wdata = 'x;
        }
    }

    always_ff (clk, rst) {
        if_reset {
            mode   = CsrMode::M;
            mcause = 0;
            mepc   = 0;
            mtvec  = 0;
        } else if valid {
            if raise_expt {
                mode   = CsrMode::M;
                mcause = cause_expt;
                mepc   = pc;
            } else {
                if cmd_is_mret {
                    mode = CsrMode::S;
                } else if cmd_is_write {
                    case csr_addr {
                        CsrAddr::MTVEC : mtvec  = wdata;
                        CsrAddr::MEPC  : mepc   = {wdata[XLEN - 1:2], 2'b00};
                        CsrAddr::MCAUSE: mcause = wdata;
                        default        : {}
                    }
                }
            }

        }
    }
}
