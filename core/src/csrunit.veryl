import eei::*;
import corectrl::*;

module csrunit (
    clk        : input   clock                   ,
    rst        : input   reset                   ,
    valid      : input   logic                   ,
    pc         : input   Addr                    ,
    inst_bits  : input   Inst                    ,
    ctrl       : input   InstCtrl                ,
    expt_info  : input   ExceptionInfo           ,
    rd_addr    : input   logic               <5> ,
    csr_addr   : input   logic               <12>,
    rs1_addr   : input   logic               <5> ,
    rs1_data   : input   UIntX                   ,
    can_intr   : input   logic                   ,
    mem_addr   : input   Addr                    ,
    rdata      : output  UIntX                   ,
    mode       : output  PrivMode                ,
    raise_trap : output  logic                   ,
    trap_vector: output  Addr                    ,
    trap_return: output  logic                   ,
    flush      : output  logic                   ,
    minstret   : input   UInt64                  ,
    led        : output  UIntX                   ,
    aclint     : modport aclint_if::slave        ,
    irq        : modport irq_if::slave           ,
    membus     : modport core_data_if::master    ,
    ptw_ctrl   : modport ptw_ctrl_if::master     ,
) {

    // wmasks
    const MSTATUS_WMASK   : UIntX = 'h0000_0000_007e_19aa as UIntX;
    const MTVEC_WMASK     : UIntX = 'hffff_ffff_ffff_fffd;
    const MEDELEG_WMASK   : UIntX = 'hffff_ffff_fffe_f7ff;
    const MIDELEG_WMASK   : UIntX = 'h0000_0000_0000_0222 as UIntX;
    const MCOUNTEREN_WMASK: UIntX = 'h0000_0000_0000_0007 as UIntX;
    const MSCRATCH_WMASK  : UIntX = 'hffff_ffff_ffff_ffff;
    const MEPC_WMASK      : UIntX = 'hffff_ffff_ffff_fffe;
    const MCAUSE_WMASK    : UIntX = 'hffff_ffff_ffff_ffff;
    const MTVAL_WMASK     : UIntX = 'hffff_ffff_ffff_ffff;
    const MIP_WMASK       : UIntX = 'h0000_0000_0000_0222 as UIntX;
    const MIE_WMASK       : UIntX = 'h0000_0000_0000_02aa as UIntX;
    const SSTATUS_WMASK   : UIntX = 'h0000_0000_000c_0122 as UIntX;
    const SIE_WMASK       : UIntX = 'h0000_0000_0000_0222 as UIntX;
    const SCOUNTEREN_WMASK: UIntX = 'h0000_0000_0000_0007 as UIntX;
    const STVEC_WMASK     : UIntX = 'hffff_ffff_ffff_fffd;
    const SSCRATCH_WMASK  : UIntX = 'hffff_ffff_ffff_ffff;
    const SEPC_WMASK      : UIntX = 'hffff_ffff_ffff_fffe;
    const SCAUSE_WMASK    : UIntX = 'hffff_ffff_ffff_ffff;
    const STVAL_WMASK     : UIntX = 'hffff_ffff_ffff_ffff;
    const SATP_WMASK      : UIntX = 'hffff_ffff_ffff_ffff;
    const LED_WMASK       : UIntX = 'hffff_ffff_ffff_ffff;

    // read masks
    const SSTATUS_RMASK: UIntX = 'h8000_0003_018f_e762;

    // CSRR(W|S|C)[I]命令かどうか
    let is_wsc: logic = ctrl.is_csr && ctrl.funct3[1:0] != 0;
    // MRET命令かどうか
    let is_mret: logic = inst_bits == 32'h30200073;
    // SRET命令かどうか
    let is_sret: logic = inst_bits == 32'h10200073;
    // WFI命令かどうか
    let is_wfi: logic = inst_bits == 32'h10500073;
    // SFENCE.VMAかどうか
    let is_sfence_vma: logic = ctrl.is_csr && ctrl.funct7 == 7'b0001001 && ctrl.funct3 == 0 && rd_addr == 0;
    // FENCE.I命令かどうか
    let is_fence_i: logic = inst_bits[6:0] == OP_MISC_MEM && ctrl.funct3 == 3'b001;

    // Check CSR access
    let will_not_write_csr     : logic = (ctrl.funct3[1:0] == 2 || ctrl.funct3[1:0] == 3) && rs1_addr == 0; // set/clear with source = 0
    let expt_write_readonly_csr: logic = is_wsc && !will_not_write_csr && csr_addr[11:10] == 2'b11; // attempt to write read-only CSR
    let expt_csr_priv_violation: logic = is_wsc && csr_addr[9:8] >: mode; // attempt to access CSR without privilege level
    let expt_zicntr_priv       : logic = is_wsc && (mode <= PrivMode::S && case csr_addr {
        CsrAddr::CYCLE  : !mcounteren[0],
        CsrAddr::TIME   : !mcounteren[1],
        CsrAddr::INSTRET: !mcounteren[2],
        default         : 0,
    } || mode <= PrivMode::U && case csr_addr {
        CsrAddr::CYCLE  : !scounteren[0],
        CsrAddr::TIME   : !scounteren[1],
        CsrAddr::INSTRET: !scounteren[2],
        default         : 0,
    }); // attempt to access Zicntr CSR without permission
    let expt_trap_return_priv: logic = (is_mret && mode <: PrivMode::M) || (is_sret && (mode <: PrivMode::S || (mode == PrivMode::S && mstatus_tsr))); // attempt to execute trap return instruction in low privilege level
    let expt_memory_fault    : logic = membus.rvalid && membus.expt.valid;
    // attempt to access satp or execute sfence.vma in S-mode & mstatus.TVM = 1
    let expt_tvm: logic = (is_sfence_vma && mode <: PrivMode::S) || (mstatus_tvm && mode == PrivMode::S && (is_wsc && csr_addr == CsrAddr::SATP || is_sfence_vma));

    // CSR
    let misa      : UIntX  = {2'd2, 1'b0 repeat XLEN - 28, 26'b00000101000001000100000101}; // U, S, M, I, C, A
    let mhartid   : UIntX  = 0;
    var mstatus   : UIntX ;
    var mtvec     : UIntX ;
    var medeleg   : UInt64;
    var mideleg   : UIntX ;
    var mcounteren: UInt32;
    var mie       : UIntX ;
    var mcycle    : UInt64;
    var mscratch  : UIntX ;
    var mepc      : UIntX ;
    var mcause    : UIntX ;
    var mtval     : UIntX ;

    var mip_reg: UIntX;
    let mip    : UIntX = mip_reg | {
        1'b0 repeat XLEN - 12, // 0, LCOFIP
        irq.meip, // MEIP
        1'b0, // 0
        irq.seip, // SEIP
        1'b0, // 0
        aclint.mtip, // MTIP
        1'b0, // 0
        1'b0, // STIP
        1'b0, // 0
        aclint.msip, // MSIP
        1'b0, // 0
        1'b0, // SSIP
        1'b0, // 0
    };

    // mstatus bits
    let mstatus_tsr : logic    = mstatus[22];
    let mstatus_tvm : logic    = mstatus[20];
    let mstatus_mxr : logic    = mstatus[19];
    let mstatus_sum : logic    = mstatus[18];
    let mstatus_mprv: logic    = mstatus[17];
    let mstatus_mpp : PrivMode = mstatus[12:11] as PrivMode;
    let mstatus_spp : PrivMode = if mstatus[8] ? PrivMode::S : PrivMode::U;
    let mstatus_mpie: logic    = mstatus[7];
    let mstatus_spie: logic    = mstatus[5];
    let mstatus_mie : logic    = mstatus[3];
    let mstatus_sie : logic    = mstatus[1];

    // Supervisor mode CSR
    let sstatus   : UIntX  = mstatus & SSTATUS_RMASK;
    var scounteren: UInt32;
    var stvec     : UIntX ;
    var sscratch  : UIntX ;
    var sepc      : UIntX ;
    var scause    : UIntX ;
    var stval     : UIntX ;
    let sip       : UIntX  = mip & mideleg;
    var sie       : UIntX ;
    var satp      : UIntX ;

    // Interrupt to M-mode
    let interrupt_pending_mmode: UIntX = mip & mie & ~mideleg;
    let raise_interrupt_mmode  : logic = (mode != PrivMode::M || mstatus_mie) && interrupt_pending_mmode != 0;
    let interrupt_cause_mmode  : UIntX = switch {
        interrupt_pending_mmode[3]: CsrCause::MACHINE_SOFTWARE_INTERRUPT,
        interrupt_pending_mmode[7]: CsrCause::MACHINE_TIMER_INTERRUPT,
        interrupt_pending_mmode[9]: CsrCause::SUPERVISOR_EXTERNAL_INTERRUPT,
        interrupt_pending_mmode[1]: CsrCause::SUPERVISOR_SOFTWARE_INTERRUPT,
        interrupt_pending_mmode[5]: CsrCause::SUPERVISOR_TIMER_INTERRUPT,
        default                   : 0,
    };

    // Interrupt to S-mode
    let interrupt_pending_smode: UIntX = sip & sie;
    let raise_interrupt_smode  : logic = (mode <: PrivMode::S || (mode == PrivMode::S && mstatus_sie)) && interrupt_pending_smode != 0;
    let interrupt_cause_smode  : UIntX = switch {
        interrupt_pending_smode[9]: CsrCause::SUPERVISOR_EXTERNAL_INTERRUPT,
        interrupt_pending_smode[1]: CsrCause::SUPERVISOR_SOFTWARE_INTERRUPT,
        interrupt_pending_smode[5]: CsrCause::SUPERVISOR_TIMER_INTERRUPT,
        default                   : 0,
    };

    // Interrupt
    let raise_interrupt : logic = valid && can_intr && (raise_interrupt_mmode || raise_interrupt_smode);
    let interrupt_cause : UIntX = if raise_interrupt_mmode ? interrupt_cause_mmode : interrupt_cause_smode;
    let interrupt_xtvec : Addr  = if interrupt_mode == PrivMode::M ? mtvec : stvec;
    let interrupt_vector: Addr  = if interrupt_xtvec[0] == 0 ?
        {interrupt_xtvec[msb:2], 2'b0}
    : // Direct
        {interrupt_xtvec[msb:2] + interrupt_cause[msb - 2:0], 2'b0}
    ; // Vectored
    let interrupt_mode: PrivMode = if raise_interrupt_mmode ? PrivMode::M : PrivMode::S;

    // Exception
    let raise_expt: logic = valid && (expt_info.valid || expt_write_readonly_csr || expt_csr_priv_violation || expt_zicntr_priv || expt_trap_return_priv || expt_memory_fault || expt_tvm);
    let expt_cause: UIntX = switch {
        expt_info.valid        : expt_info.cause,
        expt_write_readonly_csr: CsrCause::ILLEGAL_INSTRUCTION,
        expt_csr_priv_violation: CsrCause::ILLEGAL_INSTRUCTION,
        expt_zicntr_priv       : CsrCause::ILLEGAL_INSTRUCTION,
        expt_trap_return_priv  : CsrCause::ILLEGAL_INSTRUCTION,
        expt_memory_fault      : if ctrl.is_load ? CsrCause::LOAD_PAGE_FAULT : CsrCause::STORE_AMO_PAGE_FAULT,
        expt_tvm               : CsrCause::ILLEGAL_INSTRUCTION,
        default                : 0,
    };
    let expt_value: UIntX = switch {
        expt_info.valid                             : expt_info.value,
        expt_cause == CsrCause::ILLEGAL_INSTRUCTION : {1'b0 repeat XLEN - $bits(Inst), inst_bits},
        expt_cause == CsrCause::LOAD_PAGE_FAULT     : mem_addr,
        expt_cause == CsrCause::STORE_AMO_PAGE_FAULT: mem_addr,
        default                                     : 0
    };
    let expt_xtvec : Addr     = if expt_mode == PrivMode::M ? mtvec : stvec;
    let expt_vector: Addr     = {expt_xtvec[msb:2], 2'b0};
    let expt_mode  : PrivMode = if mode == PrivMode::M || !medeleg[expt_cause[5:0]] ? PrivMode::M : PrivMode::S;

    // Trap Return
    assign trap_return        = valid && (is_mret || is_sret) && !raise_expt && !raise_interrupt;
    let trap_return_mode  : PrivMode = if is_mret ? mstatus_mpp : mstatus_spp;
    let trap_return_vector: Addr     = if is_mret ? mepc : sepc;

    // Trap
    assign raise_trap = raise_expt || raise_interrupt || trap_return;
    let trap_cause: UIntX = switch {
        raise_expt     : expt_cause,
        raise_interrupt: interrupt_cause,
        default        : 0,
    };
    assign trap_vector = switch {
        raise_expt     : expt_vector,
        raise_interrupt: interrupt_vector,
        trap_return    : trap_return_vector,
        default        : 0,
    };
    let trap_mode_next: PrivMode = switch {
        raise_expt     : expt_mode,
        raise_interrupt: interrupt_mode,
        trap_return    : trap_return_mode,
        default        : PrivMode::U,
    };

    // flush logic
    let wsc_flush: logic = is_wsc && (csr_addr == CsrAddr::SATP || csr_addr == CsrAddr::MSTATUS);
    assign flush     = valid && (wsc_flush || is_fence_i);

    // connect to ptw
    always_comb {
        ptw_ctrl.priv = mode;
        ptw_ctrl.satp = satp;
        ptw_ctrl.mxr  = mstatus_mxr;
        ptw_ctrl.sum  = mstatus_sum;
        ptw_ctrl.mprv = mstatus_mprv;
        ptw_ctrl.mpp  = mstatus_mpp;
    }

    var wmask: UIntX; // write mask
    var wdata: UIntX; // write data

    always_comb {
        // read
        rdata = case csr_addr {
            CsrAddr::MISA      : misa,
            CsrAddr::MIMPID    : MACHINE_IMPLEMENTATION_ID,
            CsrAddr::MHARTID   : mhartid,
            CsrAddr::MSTATUS   : mstatus,
            CsrAddr::MTVEC     : mtvec,
            CsrAddr::MEDELEG   : medeleg,
            CsrAddr::MIDELEG   : mideleg,
            CsrAddr::MIP       : mip,
            CsrAddr::MIE       : mie,
            CsrAddr::MCOUNTEREN: {1'b0 repeat XLEN - 32, mcounteren},
            CsrAddr::MCYCLE    : mcycle,
            CsrAddr::MINSTRET  : minstret,
            CsrAddr::MSCRATCH  : mscratch,
            CsrAddr::MEPC      : mepc,
            CsrAddr::MCAUSE    : mcause,
            CsrAddr::MTVAL     : mtval,
            CsrAddr::SSTATUS   : sstatus,
            CsrAddr::SCOUNTEREN: {1'b0 repeat XLEN - 32, scounteren},
            CsrAddr::STVEC     : stvec,
            CsrAddr::SSCRATCH  : sscratch,
            CsrAddr::SEPC      : sepc,
            CsrAddr::SCAUSE    : scause,
            CsrAddr::STVAL     : stval,
            CsrAddr::SIP       : sip,
            CsrAddr::SIE       : sie & mideleg,
            CsrAddr::SATP      : satp,
            CsrAddr::LED       : led,
            CsrAddr::CYCLE     : mcycle,
            CsrAddr::TIME      : aclint.mtime,
            CsrAddr::INSTRET   : minstret,
            default            : 'x,
        };
        // write
        wmask = case csr_addr {
            CsrAddr::MSTATUS   : MSTATUS_WMASK,
            CsrAddr::MTVEC     : MTVEC_WMASK,
            CsrAddr::MEDELEG   : MEDELEG_WMASK,
            CsrAddr::MIDELEG   : MIDELEG_WMASK,
            CsrAddr::MIP       : MIP_WMASK,
            CsrAddr::MIE       : MIE_WMASK,
            CsrAddr::MCOUNTEREN: MCOUNTEREN_WMASK,
            CsrAddr::MSCRATCH  : MSCRATCH_WMASK,
            CsrAddr::MEPC      : MEPC_WMASK,
            CsrAddr::MCAUSE    : MCAUSE_WMASK,
            CsrAddr::MTVAL     : MTVAL_WMASK,
            CsrAddr::SSTATUS   : SSTATUS_WMASK,
            CsrAddr::SCOUNTEREN: SCOUNTEREN_WMASK,
            CsrAddr::STVEC     : STVEC_WMASK,
            CsrAddr::SSCRATCH  : SSCRATCH_WMASK,
            CsrAddr::SEPC      : SEPC_WMASK,
            CsrAddr::SCAUSE    : SCAUSE_WMASK,
            CsrAddr::STVAL     : STVAL_WMASK,
            CsrAddr::SIE       : SIE_WMASK & mideleg,
            CsrAddr::SATP      : SATP_WMASK,
            CsrAddr::LED       : LED_WMASK,
            default            : 0,
        };
        let wsource: UIntX = if ctrl.funct3[2] ? {1'b0 repeat XLEN - 5, rs1_addr} : rs1_data;
        wdata   = case ctrl.funct3[1:0] {
            2'b01  : wsource,
            2'b10  : rdata | wsource,
            2'b11  : rdata & ~wsource,
            default: 'x,
        } & wmask | (rdata & ~wmask);
    }

    let setssip: UIntX = {1'b0 repeat XLEN - 2, aclint.setssip, 1'b0};

    always_ff {
        if_reset {
            mode       = PrivMode::M;
            mstatus    = MSTATUS_SXL | MSTATUS_UXL;
            mtvec      = 0;
            medeleg    = 0;
            mideleg    = 0;
            mie        = 0;
            mip_reg    = 0;
            mcounteren = 0;
            mscratch   = 0;
            mcycle     = 0;
            mepc       = 0;
            mcause     = 0;
            mtval      = 0;
            scounteren = 0;
            stvec      = 0;
            sscratch   = 0;
            sepc       = 0;
            scause     = 0;
            stval      = 0;
            sie        = 0;
            satp       = 0;
            led        = 0;
        } else {
            mcycle  += 1;
            mip_reg |= setssip;
            if valid {
                if raise_trap {
                    if raise_expt || raise_interrupt {
                        let xepc: Addr = if raise_expt ? pc : // exception
                         if raise_interrupt && is_wfi ? pc + 4 : pc; // interrupt when wfi / interrupt
                        if trap_mode_next == PrivMode::M {
                            mepc   = xepc;
                            mcause = trap_cause;
                            if raise_expt {
                                mtval = expt_value;
                            }
                            // save mstatus.mie to mstatus.mpie
                            // and set mstatus.mie = 0
                            mstatus[7] = mstatus[3];
                            mstatus[3] = 0;
                            // save current privilege level to mstatus.mpp
                            mstatus[12:11] = mode;
                        } else {
                            sepc   = xepc;
                            scause = trap_cause;
                            if raise_expt {
                                stval = expt_value;
                            }
                            // save sstatus.sie to sstatus.spie
                            // and set sstatus.sie = 0
                            mstatus[5] = mstatus[1];
                            mstatus[1] = 0;
                            // save current privilege mode (S or U) to sstatus.spp
                            mstatus[8] = mode[0];
                        }
                    } else if trap_return {
                        // set mstatus.mprv = 0 when new mode != M-mode
                        if trap_mode_next <: PrivMode::M {
                            mstatus[17] = 0;
                        }
                        if is_mret {
                            // set mstatus.mie = mstatus.mpie
                            //     mstatus.mpie = 0
                            mstatus[3] = mstatus[7];
                            mstatus[7] = 0;
                            // set mstatus.mpp = U (least privilege level)
                            mstatus[12:11] = PrivMode::U;
                        } else if is_sret {
                            // set sstatus.sie = sstatus.spie
                            //     sstatus.spie = 0
                            mstatus[1] = mstatus[5];
                            mstatus[5] = 0;
                            // set sstatus.spp = U (least privilege level)
                            mstatus[8] = 0;
                        }
                    }
                    mode = trap_mode_next;
                } else {
                    if is_wsc {
                        case csr_addr {
                            CsrAddr::MSTATUS   : mstatus    = validate_mstatus(mstatus, wdata);
                            CsrAddr::MTVEC     : mtvec      = wdata;
                            CsrAddr::MEDELEG   : medeleg    = wdata;
                            CsrAddr::MIDELEG   : mideleg    = wdata;
                            CsrAddr::MIP       : mip_reg    = (wdata & MIP_WMASK) | setssip;
                            CsrAddr::MIE       : mie        = wdata;
                            CsrAddr::MCOUNTEREN: mcounteren = wdata[31:0];
                            CsrAddr::MSCRATCH  : mscratch   = wdata;
                            CsrAddr::MEPC      : mepc       = wdata;
                            CsrAddr::MCAUSE    : mcause     = wdata;
                            CsrAddr::MTVAL     : mtval      = wdata;
                            CsrAddr::SSTATUS   : mstatus    = validate_mstatus(mstatus, wdata | mstatus & ~SSTATUS_WMASK);
                            CsrAddr::SCOUNTEREN: scounteren = wdata[31:0];
                            CsrAddr::STVEC     : stvec      = wdata;
                            CsrAddr::SSCRATCH  : sscratch   = wdata;
                            CsrAddr::SEPC      : sepc       = wdata;
                            CsrAddr::SCAUSE    : scause     = wdata;
                            CsrAddr::STVAL     : stval      = wdata;
                            CsrAddr::SIE       : sie        = wdata;
                            CsrAddr::SATP      : satp       = validate_satp(satp, wdata);
                            CsrAddr::LED       : led        = wdata;
                            default            : {}
                        }
                    }
                }
            }
        }
    }

    function validate_mstatus (
        mstatus: input UIntX,
        wdata  : input UIntX,
    ) -> UIntX {
        var result: UIntX;
        result = wdata;
        // MPP
        if wdata[12:11] == 2'b10 {
            result[12:11] = mstatus[12:11];
        }
        return result;
    }

    function validate_satp (
        satp : input UIntX,
        wdata: input UIntX,
    ) -> UIntX {
        // mode
        if wdata[msb-:4] != 0 && wdata[msb-:4] != 8 {
            return satp;
        }
        return wdata;
    }
}
