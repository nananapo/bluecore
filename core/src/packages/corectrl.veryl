import eei::*;

package corectrl {
    enum InstType: logic<6> {
        X = 6'b000000,
        R = 6'b000001,
        I = 6'b000010,
        S = 6'b000100,
        B = 6'b001000,
        U = 6'b010000,
        J = 6'b100000,
    }

    struct InstCtrl {
        is_legal : logic      , // 命令が合法である
        insttype : InstType   , // 命令のType
        rf_wen   : logic      , // レジスタに書き込むかどうか
        is_lui   : logic      , // LUI命令である
        is_aluop : logic      , // ALUを利用する命令である
        is_jump  : logic      , // ジャンプ命令である
        is_load  : logic      , // ロード命令である
        is_system: logic      , // CSR命令である
        is_fence : logic      , // フェンス命令である
        funct3   : logic   <3>, // 命令のfunct3フィールド
        funct7   : logic   <7>, // 命令のfunct7フィールド
    }

    function inst_is_auipc (
        ctrl: input InstCtrl,
    ) -> logic    {
        return ctrl.insttype == InstType::U & !ctrl.is_lui;
    }

    function inst_is_lui (
        ctrl: input InstCtrl,
    ) -> logic    {
        return ctrl.insttype == InstType::U & ctrl.is_lui;
    }

    function inst_is_branch (
        ctrl: input InstCtrl,
    ) -> logic    {
        return ctrl.insttype == InstType::B;
    }

    function inst_is_jump (
        ctrl: input InstCtrl,
    ) -> logic    {
        return ctrl.is_jump;
    }

    function inst_is_memory_op (
        ctrl: input InstCtrl,
    ) -> logic    {
        return ctrl.insttype == InstType::S | ctrl.is_load;
    }

    function inst_is_csr_op (
        ctrl: input InstCtrl,
    ) -> logic    {
        return ctrl.is_system;
    }

    function inst_is_csr_imm (
        ctrl: input InstCtrl,
    ) -> logic    {
        return inst_is_csr_op(ctrl) & ctrl.funct3[2] == 1'b1;
    }

    function inst_use_rs1 (
        ctrl: input InstCtrl,
    ) -> logic    {
        return ctrl.insttype != InstType::U & ctrl.insttype != InstType::J;
    }

    function inst_use_rs2 (
        ctrl: input InstCtrl,
    ) -> logic    {
        return ctrl.insttype != InstType::U & ctrl.insttype != InstType::J & ctrl.insttype != InstType::I;
    }
}
