import corectrl::*;
import eei::*;

module memunit (
    clk     : input   logic           ,
    rst     : input   logic           ,
    dbus_if : modport membus_if::slave,
    valid   : input   logic           ,
    is_new  : input   logic           ,
    is_stall: output  logic           ,
    rdata   : output  UIntX           ,
    ctrl    : input   InstCtrl        ,
    rs2     : input   UIntX           ,
    addr    : input   UIntX           ,
) {

    enum State: logic<2> {
        Init,
        WaitReady,
        WaitValid,
    }

    var state: State;

    let is_memcmd: logic = inst_is_memory_op(ctrl);
    let is_store : logic = !ctrl.is_load;

    var req_mem_wen  : logic     ;
    var req_mem_addr : Addr      ;
    var req_mem_wdata: MemBusData;
    var req_mem_wmask: MemBusMask;

    always_comb {
        dbus_if.valid = state === State::WaitReady;
        dbus_if.addr  = req_mem_addr;
        dbus_if.wen   = req_mem_wen;
        dbus_if.wdata = req_mem_wdata;
        dbus_if.wmask = req_mem_wmask;
    }

    always_comb {
        is_stall = valid & is_memcmd & case state {
            State::Init     : is_new,
            State::WaitReady: 1,
            State::WaitValid: !dbus_if.resp_valid,
            default         : 0,
        };
        case ctrl.funct3 {
            3'b000 : case addr[1:0] {
                         0      : rdata = {dbus_if.resp_rdata[7] repeat MEMBUS_WIDTH - 8, dbus_if.resp_rdata[7:0]};
                1      : rdata = {dbus_if.resp_rdata[15] repeat MEMBUS_WIDTH - 8, dbus_if.resp_rdata[15:8]};
                2      : rdata = {dbus_if.resp_rdata[23] repeat MEMBUS_WIDTH - 8, dbus_if.resp_rdata[23:16]};
                3      : rdata = {dbus_if.resp_rdata[31] repeat MEMBUS_WIDTH - 8, dbus_if.resp_rdata[31:24]};
                default: rdata = 'x;
            }
            3'b100 : case addr[1:0] {
                         0      : rdata = {1'b0 repeat MEMBUS_WIDTH - 8, dbus_if.resp_rdata[7:0]};
                1      : rdata = {1'b0 repeat MEMBUS_WIDTH - 8, dbus_if.resp_rdata[15:8]};
                2      : rdata = {1'b0 repeat MEMBUS_WIDTH - 8, dbus_if.resp_rdata[23:16]};
                3      : rdata = {1'b0 repeat MEMBUS_WIDTH - 8, dbus_if.resp_rdata[31:24]};
                default: rdata = 'x;
            }
            3'b001 : case addr[1:0] {
                         0      : rdata = {dbus_if.resp_rdata[15] repeat MEMBUS_WIDTH - 16, dbus_if.resp_rdata[15:0]};
                2      : rdata = {dbus_if.resp_rdata[31] repeat MEMBUS_WIDTH - 16, dbus_if.resp_rdata[31:16]};
                default: rdata = 'x;
            }
            3'b101 : case addr[1:0] {
                         0      : rdata = {1'b0 repeat MEMBUS_WIDTH - 16, dbus_if.resp_rdata[15:0]};
                2      : rdata = {1'b0 repeat MEMBUS_WIDTH - 16, dbus_if.resp_rdata[31:16]};
                default: rdata = 'x;
            }
            3'b010 : rdata = dbus_if.resp_rdata;
            default: rdata = 'x;
        }
    }

    always_ff (clk) {
        req_mem_wen   = is_store;
        req_mem_addr  = addr;
        req_mem_wdata = rs2 << {addr[1:0], 3'b0};
        case ctrl.funct3[1:0] {
            2'b00  : req_mem_wmask = 4'b1 << addr[1:0];
            2'b01  : case addr[1:0] {
                         2      : req_mem_wmask = 4'b1100;
                0      : req_mem_wmask = 4'b0011;
                default: req_mem_wmask = 'x;
            }
            2'b10  : req_mem_wmask = 4'b1111;
            default: req_mem_wmask = 'x;
        }
    }

    always_ff (clk, rst) {
        if_reset {
            state = State::Init;
        } else {
            if valid {
                case state {
                    State::Init: if is_new & is_memcmd {
                                     state = State::WaitReady;
                                 }
                    State::WaitReady: if dbus_if.ready {
                                          state = State::WaitValid;
                                      }
                    State::WaitValid: if dbus_if.resp_valid {
                                          state = State::Init;
                                      }
                    default: {}
                }
            }
        }
    }
}
