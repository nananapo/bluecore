import eei::*;
import corectrl::*;

module memunit (
    clk   : input   clock                                    ,
    rst   : input   reset                                    ,
    valid : input   logic                                    ,
    is_new: input   logic                                    , // 命令が新しく供給されたかどうか
    ctrl  : input   InstCtrl                                 , // 命令のInstCtrl
    addr  : input   Addr                                     , // アクセスするアドレス
    rs2   : input   UIntX                                    , // ストア命令で書き込むデータ
    rdata : output  UIntX                                    , // ロード命令の結果 (stall = 0のときに有効)
    stall : output  logic                                    , // メモリアクセス命令が完了していない
    membus: modport membus_if::<MEM_DATA_WIDTH, XLEN>::master, // メモリとのinterface
) {

    // memunitの状態を表す列挙型
    enum State: logic<2> {
        Init, // 命令を受け付ける状態
        WaitReady, // メモリが操作可能になるのを待つ状態
        WaitValid, // メモリ操作が終了するのを待つ状態
    }

    var state: State;

    var req_wen  : logic                    ;
    var req_addr : Addr                     ;
    var req_wdata: logic<MEM_DATA_WIDTH>    ;
    var req_wmask: logic<MEM_DATA_WIDTH / 8>;

    const W   : u32                   = XLEN;
    let D   : logic<MEM_DATA_WIDTH> = membus.rdata;
    let sext: logic                 = ctrl.funct3[2] == 1'b0;

    always_comb {
        // メモリアクセス
        membus.valid = state == State::WaitReady;
        membus.addr  = req_addr;
        membus.wen   = req_wen;
        membus.wdata = req_wdata;
        membus.wmask = req_wmask;
        // loadの結果
    // #@@range_begin(rdata)
    rdata = case ctrl.funct3[1:0] {
        2'b00  : case addr[@<b>|2|:0] {
            0      : {sext & D[7] repeat W - 8, D[7:0]},
            1      : {sext & D[15] repeat W - 8, D[15:8]},
            2      : {sext & D[23] repeat W - 8, D[23:16]},
            3      : {sext & D[31] repeat W - 8, D[31:24]},
            @<b>|4      : {sext & D[39] repeat W - 8, D[39:32]},|
            @<b>|5      : {sext & D[47] repeat W - 8, D[47:40]},|
            @<b>|6      : {sext & D[55] repeat W - 8, D[55:48]},|
            @<b>|7      : {sext & D[63] repeat W - 8, D[63:56]},|
            default: 'x,
        },
        2'b01  : case addr[@<b>|2|:0] {
            0      : {sext & D[15] repeat W - 16, D[15:0]},
            2      : {sext & D[31] repeat W - 16, D[31:16]},
            @<b>|4      : {sext & D[47] repeat W - 16, D[47:32]},|
            @<b>|6      : {sext & D[63] repeat W - 16, D[63:48]},|
            default: 'x,
        },
        2'b10  : @<b>|case addr[2:0] {|
            @<b>|0      : {sext & D[31] repeat W - 32, D[31:0]},|
            @<b>|4      : {sext & D[63] repeat W - 32, D[63:32]},|
            @<b>|default: 'x,|
        @<b>|},|
        @<b>|2'b11  : D,|
        default: 'x,
    };
    // #@@range_end(rdata)
        // stall判定
        stall = valid & case state {
            State::Init     : is_new && inst_is_memop(ctrl),
            State::WaitReady: 1,
            State::WaitValid: !membus.rvalid,
            default         : 0,
        };
    }

    always_ff {
        if_reset {
            state     = State::Init;
            req_wen   = 0;
            req_addr  = 0;
            req_wdata = 0;
            req_wmask = 0;
        } else {
            if valid {
                case state {
                    State::Init: if is_new & inst_is_memop(ctrl) {
                        state     = State::WaitReady;
                        req_wen   = inst_is_store(ctrl);
                        req_addr  = addr;
    // #@@range_begin(wdata)
    req_wdata = rs2 << {addr[@<b>|2|:0], 3'b0};
    // #@@range_end(wdata)
    // #@@range_begin(wmask)
    req_wmask = case ctrl.funct3[1:0] {
        2'b00  : @<b>|8|'b1 << addr[@<b>|2|:0],
        2'b01  : case addr[@<b>|2|:0] {
            @<b>|6      : 8'b11000000,|
            @<b>|4      : 8'b00110000,|
            2      : @<b>|8'b00001100|,
            0      : @<b>|8'b00000011|,
            default: 'x,
        },
        2'b10  : @<b>|case addr[2:0] {|
            @<b>|0      : 8'b00001111,|
            @<b>|4      : 8'b11110000,|
            @<b>|default: 'x,|
        @<b>|},|
        @<b>|2'b11  : 8'b11111111,|
        default: 'x,
    };
    // #@@range_end(wmask)
                    }
                    State::WaitReady: if membus.ready {
                        state = State::WaitValid;
                    }
                    State::WaitValid: if membus.rvalid {
                        state = State::Init;
                    }
                    default: {}
                }
            }
        }
    }
}
