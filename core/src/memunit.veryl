import corectrl::*;
import eei::*;

module memunit (
    clk     : input   logic           ,
    rst     : input   logic           ,
    dbus_if : modport membus_if::slave,
    valid   : input   logic           ,
    is_new  : input   logic           ,
    ctrl    : input   InstCtrl        ,
    rs2     : input   UIntX           ,
    addr    : input   UIntX           ,
    is_stall: output  logic           ,
    mem_out : output  UIntX           ,
) {

    enum State: logic<2> {
        Init,
        WaitReady,
        WaitValid,
    }

    var state: State;

    always_comb {
        if valid & ctrl.mem_cmd != MemCmd::X {
            dbus_if.valid = state == State::Init & is_new | state == State::WaitReady;
        } else {
            dbus_if.valid = 0;
        }
        dbus_if.wen   = ctrl.mem_cmd == MemCmd::S;
        dbus_if.addr  = addr;
        dbus_if.wdata = {1'b0 repeat $bits(dbus_if.wdata) - XLEN, rs2} << {addr[2:0], 3'b000};
        case ctrl.mem_size {
            Size::B: dbus_if.wmask = 8'b1 << addr[2:0];
            Size::H: case addr[2:0] {
                         6      : dbus_if.wmask = 8'b11000000;
                4      : dbus_if.wmask = 8'b00110000;
                2      : dbus_if.wmask = 8'b00001100;
                0      : dbus_if.wmask = 8'b00000011;
                default: dbus_if.wmask = 8'b0;
            }
            Size::W: case addr[2:0] {
                         4      : dbus_if.wmask = 8'b11110000;
                0      : dbus_if.wmask = 8'b00001111;
                default: dbus_if.wmask = 8'b0;
            }
            default: dbus_if.wmask = 8'b11111111;
        }
    }

    var mem_rdata_64: UInt64;
    local MEM_WIDTH   : u32    = 64;

    always_comb {
        is_stall = valid & ctrl.mem_cmd != MemCmd::X & case state {
            State::Init     : is_new,
            State::WaitReady: 1,
            State::WaitValid: !dbus_if.resp_valid,
            default         : 0,
        };
        case ctrl.mem_size {
            Size::B: if ctrl.is_signed {
                         case addr[2:0] {
                             0      : mem_rdata_64 = {dbus_if.resp_rdata[7] repeat MEM_WIDTH - 8, dbus_if.resp_rdata[7:0]};
                    1      : mem_rdata_64 = {dbus_if.resp_rdata[15] repeat MEM_WIDTH - 8, dbus_if.resp_rdata[15:8]};
                    2      : mem_rdata_64 = {dbus_if.resp_rdata[23] repeat MEM_WIDTH - 8, dbus_if.resp_rdata[23:16]};
                    3      : mem_rdata_64 = {dbus_if.resp_rdata[31] repeat MEM_WIDTH - 8, dbus_if.resp_rdata[31:24]};
                    4      : mem_rdata_64 = {dbus_if.resp_rdata[39] repeat MEM_WIDTH - 8, dbus_if.resp_rdata[39:32]};
                    5      : mem_rdata_64 = {dbus_if.resp_rdata[47] repeat MEM_WIDTH - 8, dbus_if.resp_rdata[47:40]};
                    6      : mem_rdata_64 = {dbus_if.resp_rdata[55] repeat MEM_WIDTH - 8, dbus_if.resp_rdata[55:48]};
                    7      : mem_rdata_64 = {dbus_if.resp_rdata[63] repeat MEM_WIDTH - 8, dbus_if.resp_rdata[63:56]};
                    default: mem_rdata_64 = 0;
                }
            } else {
                case addr[2:0] {
                    0      : mem_rdata_64 = {1'b0 repeat MEM_WIDTH - 8, dbus_if.resp_rdata[7:0]};
                    1      : mem_rdata_64 = {1'b0 repeat MEM_WIDTH - 8, dbus_if.resp_rdata[15:8]};
                    2      : mem_rdata_64 = {1'b0 repeat MEM_WIDTH - 8, dbus_if.resp_rdata[23:16]};
                    3      : mem_rdata_64 = {1'b0 repeat MEM_WIDTH - 8, dbus_if.resp_rdata[31:24]};
                    4      : mem_rdata_64 = {1'b0 repeat MEM_WIDTH - 8, dbus_if.resp_rdata[39:32]};
                    5      : mem_rdata_64 = {1'b0 repeat MEM_WIDTH - 8, dbus_if.resp_rdata[47:40]};
                    6      : mem_rdata_64 = {1'b0 repeat MEM_WIDTH - 8, dbus_if.resp_rdata[55:48]};
                    7      : mem_rdata_64 = {1'b0 repeat MEM_WIDTH - 8, dbus_if.resp_rdata[63:56]};
                    default: mem_rdata_64 = 0;
                }
            }
            Size::H: if ctrl.is_signed {
                         case addr[2:0] {
                             0      : mem_rdata_64 = {dbus_if.resp_rdata[15] repeat MEM_WIDTH - 16, dbus_if.resp_rdata[15:0]};
                    2      : mem_rdata_64 = {dbus_if.resp_rdata[31] repeat MEM_WIDTH - 16, dbus_if.resp_rdata[31:16]};
                    4      : mem_rdata_64 = {dbus_if.resp_rdata[47] repeat MEM_WIDTH - 16, dbus_if.resp_rdata[47:32]};
                    6      : mem_rdata_64 = {dbus_if.resp_rdata[63] repeat MEM_WIDTH - 16, dbus_if.resp_rdata[63:48]};
                    default: mem_rdata_64 = 0;
                }
            } else {
                case addr[2:0] {
                    0      : mem_rdata_64 = {1'b0 repeat MEM_WIDTH - 16, dbus_if.resp_rdata[15:0]};
                    2      : mem_rdata_64 = {1'b0 repeat MEM_WIDTH - 16, dbus_if.resp_rdata[31:16]};
                    4      : mem_rdata_64 = {1'b0 repeat MEM_WIDTH - 16, dbus_if.resp_rdata[47:32]};
                    6      : mem_rdata_64 = {1'b0 repeat MEM_WIDTH - 16, dbus_if.resp_rdata[63:48]};
                    default: mem_rdata_64 = 0;
                }
            }
            Size::W: if ctrl.is_signed {
                         case addr[2:0] {
                             0      : mem_rdata_64 = {dbus_if.resp_rdata[31] repeat MEM_WIDTH - 32, dbus_if.resp_rdata[31:0]};
                    4      : mem_rdata_64 = {dbus_if.resp_rdata[63] repeat MEM_WIDTH - 32, dbus_if.resp_rdata[63:32]};
                    default: mem_rdata_64 = 0;
                }
            } else {
                case addr[2:0] {
                    0      : mem_rdata_64 = {1'b0 repeat MEM_WIDTH - 32, dbus_if.resp_rdata[31:0]};
                    4      : mem_rdata_64 = {1'b0 repeat MEM_WIDTH - 32, dbus_if.resp_rdata[63:32]};
                    default: mem_rdata_64 = 0;
                }
            }
            default: mem_rdata_64 = dbus_if.resp_rdata;
        }
        mem_out = mem_rdata_64[XLEN - 1:0];
    }

    always_ff (clk, rst) {
        if_reset {
            state = State::Init;
        } else {
            if valid {
                if state == State::Init {
                    if is_new {
                        if ctrl.mem_cmd != MemCmd::X {
                            state = if dbus_if.ready {
                                State::WaitValid
                            } else {
                                State::WaitReady
                            };
                        }
                    }
                } else if state == State::WaitReady {
                    if dbus_if.ready {
                        state = State::WaitValid;
                    }
                } else if state == State::WaitValid {
                    if dbus_if.resp_valid {
                        state = State::Init;
                    }
                }
            }
        }
    }
}
