import eei::*;

package inst_gen_pkg {
    function add (
        rd : input logic<5>,
        rs1: input logic<5>,
        rs2: input logic<5>,
    ) -> Inst {
        return {7'b0000000, rs2, rs1, 3'b000, rd, OP_OP};
    }

    function addw (
        rd : input logic<5>,
        rs1: input logic<5>,
        rs2: input logic<5>,
    ) -> Inst {
        return {7'b0000000, rs2, rs1, 3'b000, rd, OP_OP_32};
    }

    function addi (
        rd : input logic<5> ,
        rs1: input logic<5> ,
        imm: input logic<12>,
    ) -> Inst {
        return {imm, rs1, 3'b000, rd, OP_OP_IMM};
    }

    function addiw (
        rd : input logic<5> ,
        rs1: input logic<5> ,
        imm: input logic<12>,
    ) -> Inst {
        return {imm, rs1, 3'b000, rd, OP_OP_IMM_32};
    }

    function sub (
        rd : input logic<5>,
        rs1: input logic<5>,
        rs2: input logic<5>,
    ) -> Inst {
        return {7'b0100000, rs2, rs1, 3'b000, rd, OP_OP};
    }

    function subw (
        rd : input logic<5>,
        rs1: input logic<5>,
        rs2: input logic<5>,
    ) -> Inst {
        return {7'b0100000, rs2, rs1, 3'b000, rd, OP_OP_32};
    }

    function inst_xor (
        rd : input logic<5>,
        rs1: input logic<5>,
        rs2: input logic<5>,
    ) -> Inst {
        return {7'b0000000, rs2, rs1, 3'b100, rd, OP_OP};
    }

    function inst_or (
        rd : input logic<5>,
        rs1: input logic<5>,
        rs2: input logic<5>,
    ) -> Inst {
        return {7'b0000000, rs2, rs1, 3'b110, rd, OP_OP};
    }

    function inst_and (
        rd : input logic<5>,
        rs1: input logic<5>,
        rs2: input logic<5>,
    ) -> Inst {
        return {7'b0000000, rs2, rs1, 3'b111, rd, OP_OP};
    }

    function andi (
        rd : input logic<5> ,
        rs1: input logic<5> ,
        imm: input logic<12>,
    ) -> Inst {
        return {imm, rs1, 3'b111, rd, OP_OP_IMM};
    }

    function slli (
        rd   : input logic<5>,
        rs1  : input logic<5>,
        shamt: input logic<6>,
    ) -> Inst {
        return {6'b000000, shamt, rs1, 3'b001, rd, OP_OP_IMM};
    }

    function srli (
        rd   : input logic<5>,
        rs1  : input logic<5>,
        shamt: input logic<6>,
    ) -> Inst {
        return {6'b000000, shamt, rs1, 3'b101, rd, OP_OP_IMM};
    }

    function srai (
        rd   : input logic<5>,
        rs1  : input logic<5>,
        shamt: input logic<6>,
    ) -> Inst {
        return {6'b010000, shamt, rs1, 3'b101, rd, OP_OP_IMM};
    }

    function lui (
        rd : input logic<5> ,
        imm: input logic<20>,
    ) -> Inst {
        return {imm, rd, OP_LUI};
    }

    function load (
        rd    : input logic<5> ,
        rs1   : input logic<5> ,
        imm   : input logic<12>,
        funct3: input logic<3> ,
    ) -> Inst {
        return {imm, rs1, funct3, rd, OP_LOAD};
    }

    function store (
        rs1   : input logic<5> ,
        rs2   : input logic<5> ,
        imm   : input logic<12>,
        funct3: input logic<3> ,
    ) -> Inst {
        return {imm[11:5], rs2, rs1, funct3, imm[4:0], OP_STORE};
    }

    function jal (
        rd : input logic<5> ,
        imm: input logic<20>,
    ) -> Inst {
        return {imm[19], imm[9:0], imm[10], imm[18:11], rd, OP_JAL};
    }

    function jalr (
        rd : input logic<5> ,
        rs1: input logic<5> ,
        imm: input logic<12>,
    ) -> Inst {
        return {imm, rs1, 3'b000, rd, OP_JALR};
    }

    function beq (
        rs1: input logic<5> ,
        rs2: input logic<5> ,
        imm: input logic<12>,
    ) -> Inst {
        return {imm[11], imm[9:4], rs2, rs1, 3'b000, imm[3:0], imm[10], OP_BRANCH};
    }

    function bne (
        rs1: input logic<5> ,
        rs2: input logic<5> ,
        imm: input logic<12>,
    ) -> Inst {
        return {imm[11], imm[9:4], rs2, rs1, 3'b001, imm[3:0], imm[10], OP_BRANCH};
    }

    function ebreak () -> Inst {
        return 32'h00100073;
    }
}
