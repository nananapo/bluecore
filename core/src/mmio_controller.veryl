import eei::*;

// #@@range_begin(port)
module mmio_controller (
    clk       : input   clock         ,
    rst       : input   reset         ,
    req_core  : modport Membus::slave ,
    @<b>|ram_membus: modport Membus::master,|
) {
// #@@range_end(port)

    // #@@range_begin(Device)
    enum Device {
        UNKNOWN,
        RAM,
    }
    // #@@range_end(Device)

    inst req_saved: Membus;

    var last_device : Device;
    var is_requested: logic ;

    // masterを0でリセットする
    function reset_membus_master (
        master: modport Membus::master_output,
    ) {
        master.valid = 0;
        master.addr  = 0;
        master.wen   = 0;
        master.wdata = 0;
        master.wmask = 0;
    }

    // すべてのデバイスのmasterをリセットする
    // #@@range_begin(reset_all)
    function reset_all_device_masters () {
        @<b>|reset_membus_master(ram_membus);|
    }
    // #@@range_end(reset_all)

    // アドレスからデバイスを取得する
    // #@@range_begin(get_device)
    function get_device (
        addr: input Addr,
    ) -> Device {
        @<b>|if addr >= MMAP_RAM_BEGIN {|
        @<b>|    return Device::RAM;|
        @<b>|}|
        return Device::UNKNOWN;
    }
    // #@@range_end(get_device)

    // デバイスのmasterにreqの情報を割り当てる
    // #@@range_begin(assign_device_master)
    function assign_device_master (
        req: modport Membus::all_input,
    ) {
        @<b>|case get_device(req.addr) {|
        @<b>|    Device::RAM: {|
        @<b>|        ram_membus      <> req;|
        @<b>|        ram_membus.addr -= MMAP_RAM_BEGIN;|
        @<b>|    }|
        @<b>|    default: {}|
        @<b>|}|
    }
    // #@@range_end(assign_device_master)

    // デバイスのrvalid、rdataをreqに割り当てる
    // #@@range_begin(assign_device_slave)
    function assign_device_slave (
        device: input   Device          ,
        req   : modport Membus::response,
    ) {
        req.rvalid = 1;
        req.rdata  = 0;
        @<b>|case device {|
        @<b>|    Device::RAM: req <> ram_membus;|
        @<b>|    default    : {}|
        @<b>|}|
    }
    // #@@range_end(assign_device_slave)

    // デバイスのreadyを取得する
    // #@@range_begin(get_device_ready)
    function get_device_ready (
        device: input Device,
    ) -> logic {
        @<b>|case device {|
        @<b>|    Device::RAM: return ram_membus.ready;|
        @<b>|    default    : {}|
        @<b>|}|
        return 1;
    }
    // #@@range_end(get_device_ready)

    // デバイスのrvalidを取得する
    // #@@range_begin(get_device_rvalid)
    function get_device_rvalid (
        device: input Device,
    ) -> logic {
        @<b>|case device {|
        @<b>|    Device::RAM: return ram_membus.rvalid;|
        @<b>|    default    : {}|
        @<b>|}|
        return 1;
    }
    // #@@range_end(get_device_rvalid)

    // req_coreの割り当て
    always_comb {
        req_core.ready  = 0;
        req_core.rvalid = 0;
        req_core.rdata  = 0;

        if req_saved.valid {
            if is_requested {
                // 結果を返す
                assign_device_slave(last_device, req_core);
                req_core.ready      = get_device_rvalid(last_device);
            }
        } else {
            req_core.ready = 1;
        }
    }

    // デバイスのmasterの割り当て
    always_comb {
        reset_all_device_masters();
        if req_saved.valid {
            if is_requested {
                if get_device_rvalid(last_device) {
                    // 新しく要求を受け入れる
                    if req_core.ready && req_core.valid {
                        assign_device_master(req_core);
                    }
                }
            } else {
                // デバイスにreq_savedを割り当てる
                assign_device_master(req_saved);
            }
        } else {
            // 新しく要求を受け入れる
            if req_core.ready && req_core.valid {
                assign_device_master(req_core);
            }
        }
    }

    // 新しく要求を受け入れる
    function accept_request () {
        req_saved.valid = req_core.ready && req_core.valid;
        if req_core.ready && req_core.valid {
            last_device  = get_device(req_core.addr);
            is_requested = get_device_ready(last_device);
            // reqを保存
            req_saved.addr  = req_core.addr;
            req_saved.wen   = req_core.wen;
            req_saved.wdata = req_core.wdata;
            req_saved.wmask = req_core.wmask;
        }
    }

    function on_clock () {
        if req_saved.valid {
            if is_requested {
                if get_device_rvalid(last_device) {
                    accept_request();
                }
            } else {
                is_requested = get_device_ready(last_device);
            }
        } else {
            accept_request();
        }
    }

    function on_reset () {
        last_device         = Device::UNKNOWN;
        is_requested        = 0;
        reset_membus_master(req_saved);
    }

    always_ff {
        if_reset {
            on_reset();
        } else {
            on_clock();
        }
    }
}
